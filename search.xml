<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kafka02（kafka与zookeeper）</title>
      <link href="2021/04/14/kafka02/"/>
      <url>2021/04/14/kafka02/</url>
      
        <content type="html"><![CDATA[<h2 id="2-kafka与zookeeper"><a href="#2-kafka与zookeeper" class="headerlink" title="2 kafka与zookeeper"></a>2 kafka与zookeeper</h2><p>还记得1.2.8.4 灾备中做的假设吗？当代理或者消费者挂了，kafka会从备份分区中抓一个崽崽当老大，把挂了的消费者的分区分给其存活的消费者。<br>这种灾备的实现就是利用zk实现的。<br>kafka和zookeeper到底是什么关系?为什么用kafka一定要zk？为啥最新版的又去掉zk了？<br>这篇文章我们就来一起探讨一下。</p><h3 id="2-1-kafka在zookeeper中存储的数据结构"><a href="#2-1-kafka在zookeeper中存储的数据结构" class="headerlink" title="2.1 kafka在zookeeper中存储的数据结构"></a>2.1 kafka在zookeeper中存储的数据结构</h3><p><img src="https://i.loli.net/2021/04/14/iN4FKEYrUlIsWLt.png"><br>zookeeper的数据结构是树形结构，节点分为永久、临时balabala的，kafka巧妙利用了其中的临时节点，来存储各个broker和consumer的信息。</p><h3 id="2-2-consumer"><a href="#2-2-consumer" class="headerlink" title="2.2 consumer"></a>2.2 consumer</h3><p>consumer是在zk下面写入每个消费者，kafka在每个节点上注册监听watch，哪个挂了，立马触发rebalance.</p><h3 id="2-3-brokers"><a href="#2-3-brokers" class="headerlink" title="2.3 brokers"></a>2.3 brokers</h3><p>brokers下面挂着分区，每一个备份分区监听leader分区，kafka监听所有分区。一方面定期将leader数据同步给follower，另一方面时刻监听leader的健康。</p><h3 id="2-4-负载均衡"><a href="#2-4-负载均衡" class="headerlink" title="2.4 负载均衡"></a>2.4 负载均衡</h3><p>kafka实现负载均衡有两种方式，一种是四层负载均衡，其原理是一个生产者对应一个分区。但是这样的实现不太完美，因为每个topic、生产者、分区的量不一定一样。<br>这就导致有的broker压力会比较大，有些会比较小。<br>另一种方式是使用zookeeper实现负载均衡。因为broker注册到zk上了，所以kafka可以动态感知每个分区的使用比率，从而实现实时动态分配生产者到broker的对应关系。</p><p>其实我看过一篇博文，画了几张注册监听的树状图，但是我找不到了呜呜呜<del>大致就是上面文字描述的这个意思。<br>如果只是简单理解zk和kafka的关系，理解到这个程度大概也马马虎虎了。新版的kafka不再需要zk,是因为用zk维护这些关系，第一是比较重，第二是zk也是单独部署的，zk挂了也是有风险的。<br>其实在kafka之前的版本就有在尝试摆脱zk了。<br>为了避免因 Consumer 故障、重启、Rebalance 等原因造成重复消费、遗漏消费消息，需要记录 Consumer 对 Partition 中消息的消费进度，即偏移量 Offset。<br>Offset 在 ZooKeeper 中，有一个专属的节点（目录）用于记录 Offset，其路径样式如下：<br>/consumers/[group_id]/offsets/[topic]/[broker_id-partition_id]<br>注意嗷，这个是保存在消费者的节点下的，其他消息队列一般是存在相当于broker的角色里的。存在消费者下，各自管各自的索引，比存在服务器更好。服务器还要记录是哪个组里哪个消费者，然后还要同步索引巴拉巴拉。<br>由此可见，offset的记录本身就是深思熟虑的结构。蓝鹅在 Kafka 2.0 中，Offset 信息不再记录于 ZooKeeper，而是保存于 Kafka 的 Topic 中，路径如下：<br>__consumer_offsets(/brokers/topics/__consumer_offsets)<br>这就体现了kafka在试图摆脱zk，而且还有把一些信息存入一个指定的topic中balabala的，有兴趣的读者可以自行了解啾咪</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kafka </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka01（基本概念）</title>
      <link href="2021/04/14/kafka01/"/>
      <url>2021/04/14/kafka01/</url>
      
        <content type="html"><![CDATA[<p>今天试着把之前学习的有关kafka的知识总结一下。</p><h2 id="1-kafka里几个基本的概念"><a href="#1-kafka里几个基本的概念" class="headerlink" title="1. kafka里几个基本的概念"></a>1. kafka里几个基本的概念</h2><p>首先kafka是用来叽里呱啦的，为了批量同步数据呀、削峰呀balabala的，本质是生产者消费者模式。kafka和其他常见的消息队列有些概念和实现上的不同，具体不同我也不知道……<br>然后这篇文章试图用比较通俗的描述方式讲清kafka的概念。具体实现是基于理解的基础上的，毕竟单纯的发送接收消息网上有很多例子~~</p><h3 id="1-1-为啥用消息队列"><a href="#1-1-为啥用消息队列" class="headerlink" title="1.1 为啥用消息队列"></a>1.1 为啥用消息队列</h3><h4 id="1-1-1-同步数据："><a href="#1-1-1-同步数据：" class="headerlink" title="1.1.1 同步数据："></a>1.1.1 同步数据：</h4><p>A向B同步数据，每次发送1000条用户信息，发送成功就打个勾勾，下次接着发没打过勾勾的1000条数据。<br>考虑一种场景下，B系统是我们的主人公小小菜开发的，听他的名字就知道这个系统多么不靠谱了。<br>他把这1000条数据拿来落库，但是主键都是一样的，都是”1”，于是只有第一条插入成功了，之后每一个都是主键冲突插入失败。<br>于是小小菜弄丢了后999条数据，他修正了代码中的bug，让A给他再发一次。但是A的库中，发过的消息都打了勾勾，有1000000086条，这下A也没法定位这999条数据具体是那些了。<br>999条消息丢失，小小菜饭碗也没了呜呜😭。</p><p>小小菜悲痛欲绝，过马路时不小心，被呼啸而来的的士撞倒了，弥留之际，仍心有不甘……世界慢慢灰暗……慢慢……</p><p>这是哪儿来的光亮？小小菜缓缓睁开眼，努力聚焦到眼前的事物上。这是一台熟悉的T480，和熟悉的idea。“啊这，我这是重生了吗？”小小菜惊喜万分，“这次我要避免失误”。</p><p>于是他先修改了主键的bug，然后又引入了kafka。即使项目再因为任何原因挂了，kafka里还是保留着最近7天（默认）的消息。数据传输变得稳定安全。</p><h4 id="1-1-2-削峰限流"><a href="#1-1-2-削峰限流" class="headerlink" title="1.1.2 削峰限流"></a>1.1.2 削峰限流</h4><p>小小菜在B项目中添加了商城模块，双十一9.9秒杀T480.由于前期活动推广给力，用户量巨大，CPU直接拉到100%，出现大量超时请求。<br>小小菜被主管狠狠骂了一通，又失意地走在街上，一辆的士呼啸而来……<br>再次重生的小小菜决定用kafka实现削峰。<br>要对流量进行削峰，最容易想到的解决方案就是用消息队列来缓冲瞬时流量，把同步的直接调用转换成异步的间接推送，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去。<br>削峰从本质上来说就是更多地延缓用户请求，以及层层过滤用户的访问需求，遵从“最后落地到数据库的请求数要尽量少”的原则。<br>kafka的消息队列满了，就不接收生产者发送的新消息，直接把后来的人的请求丢掉，实现了流量削峰（呜呜呜难怪我总是抢不到）。<br>这个例子的生成者和消费者都是B系统。是B中不同的service.</p><h3 id="1-2-kafka主要概念"><a href="#1-2-kafka主要概念" class="headerlink" title="1.2 kafka主要概念"></a>1.2 kafka主要概念</h3><p><img src="https://i.loli.net/2021/04/14/JhYeIpZzRuaBScO.png"><br>图片参考博客：<a href="https://www.jianshu.com/p/d3e963ff8b70" target="_blank" rel="noopener">https://www.jianshu.com/p/d3e963ff8b70</a><br>如图是kafka的主要数据流程图，我们需要了解的几个基本对象都在其中。</p><h4 id="1-2-1-生产者"><a href="#1-2-1-生产者" class="headerlink" title="1.2.1 生产者"></a>1.2.1 生产者</h4><p><strong>producter即生产者</strong>，创造消息的对象，对应上例中的A.</p><h4 id="1-2-2-消费者"><a href="#1-2-2-消费者" class="headerlink" title="1.2.2 消费者"></a>1.2.2 消费者</h4><p><strong>Consumer即消费者</strong>，接收并处理消息的对象，对应小小菜开发的接口B.</p><h4 id="1-2-3-代理"><a href="#1-2-3-代理" class="headerlink" title="1.2.3 代理"></a>1.2.3 代理</h4><p><strong>Broker 代理</strong>。每个代理内维持一个kafka实例。可以简单理解broker为一台台服务器，每个服务器上都装了一个kafka。</p><h4 id="1-2-4-主题"><a href="#1-2-4-主题" class="headerlink" title="1.2.4 主题"></a>1.2.4 主题</h4><p><strong>Topic 主题</strong>。如上例有两个主题，一个是A系统发送的用户信息主题，另一个是B系统发送的秒杀请求主题。</p><h4 id="1-2-5-分区"><a href="#1-2-5-分区" class="headerlink" title="1.2.5 分区"></a>1.2.5 分区</h4><p><strong>partition 分区</strong>。 </p><h4 id="1-2-6-备份"><a href="#1-2-6-备份" class="headerlink" title="1.2.6 备份"></a>1.2.6 备份</h4><p>topic0 partition0在broker0\1\2中都存在，broker0中的是leader，broker1、2中的是follower.在使用中，，broker1、2里的partition0是没用的，只起到灾备的作用。<br>如果broker0挂了，kafka会从broker1、2里选一个partition0做leader.</p><h4 id="1-2-7-消费者组"><a href="#1-2-7-消费者组" class="headerlink" title="1.2.7 消费者组"></a>1.2.7 消费者组</h4><p>kafka还有一个消费者组的概念，一个分区里的内容可以被多个消费者组消费。同时，同一个消费者组内，kafka会自动分配每个消费者消费哪几个分区。同组内不会重复消费。</p><h4 id="1-2-8-综合举例"><a href="#1-2-8-综合举例" class="headerlink" title="1.2.8 综合举例"></a>1.2.8 综合举例</h4><h5 id="1-2-8-1-单分区"><a href="#1-2-8-1-单分区" class="headerlink" title="1.2.8.1 单分区"></a>1.2.8.1 单分区</h5><p><strong>只有一个分区的情况下</strong>，消息队列像一个通道。<br>举个例子，小崧是生产者，生产水果。小雨是broke0中，“水果”topic下的，的分区0.小爱是消费者。<br>生产者0：崧崧；broker0: partition0:小小雨；消费者0：小小爱。<br>崧崧给我两个果果，我给小爱两个果果。注意，同一个分区下消息是有序的。崧崧给我苹果、香蕉。我就给小爱苹果、香蕉，不会倒过来给。</p><h5 id="1-2-8-2-多分区"><a href="#1-2-8-2-多分区" class="headerlink" title="1.2.8.2 多分区"></a>1.2.8.2 多分区</h5><p><strong>如果多个分区</strong>，情况变得复杂。小宇是broke0中，“水果”topic下的，的分区0<br>生产者0：崧崧；broker0: partition0:小小雨，partition1:小宇 ；消费者0：小小爱。<br>崧崧生产了苹果1、苹果2，香蕉1，香蕉2.<br>生产者发送消息伪代码：<br>ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(“水果”, “苹果”, “苹果1”);//Topic Key Value<br>Future future = producer.send(record);<br>可以看到，<strong>发送消息时要指定topic,和当前这条消息的key</strong>.<br>消息发到分区时，根据hash算法决定分给哪个分区。<br>def partition(key: Any, numPartitions: Int): Int = {<br>    Utils.abs(key.hashCode) % numPartitions<br>}<br>所以<strong>相同的key一定分到相同的分区</strong>。苹果到苹果分区，香蕉到香蕉分区。<br>如果你没有指定key，那么Kafka是如何确定这条消息去往哪个分区的呢？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果没有指定key</span>    val id <span class="token operator">=</span> sendPartitionPerTopicCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 先看看Kafka有没有缓存的现成的分区Id</span>    id match <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token function">Some</span><span class="token punctuation">(</span>partitionId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>          partitionId  <span class="token comment" spellcheck="true">// 如果有的话直接使用这个分区Id就好了</span>      <span class="token keyword">case</span> None <span class="token operator">=</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 如果没有的话，</span>        val availablePartitions <span class="token operator">=</span> topicPartitionList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>leaderBrokerIdOpt<span class="token punctuation">.</span>isDefined<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//找出所有可用分区的leader所在的broker</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>availablePartitions<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaderNotAvailableException</span><span class="token punctuation">(</span><span class="token string">"No leader for any partition in topic "</span> <span class="token operator">+</span> topic<span class="token punctuation">)</span>        val index <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">)</span> <span class="token operator">%</span> availablePartitions<span class="token punctuation">.</span>size  <span class="token comment" spellcheck="true">// 从中随机挑一个</span>        val partitionId <span class="token operator">=</span> <span class="token function">availablePartitions</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>partitionId        sendPartitionPerTopicCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partitionId<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新缓存以备下一次直接使用</span>        partitionId    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>key分区原理考博客：<a href="https://www.cnblogs.com/sodawoods-blogs/p/8969513.html" target="_blank" rel="noopener">https://www.cnblogs.com/sodawoods-blogs/p/8969513.html</a></p><p>崧崧发送四个水果<br>ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(“水果”, “苹果”, “苹果1”);//Topic Key Value<br>ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(“水果”, “苹果”, “苹果2”);//Topic Key Value<br>ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(“水果”, “香蕉”, “香蕉1”);//Topic Key Value<br>ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(“水果”, “香蕉”, “香蕉2”);//Topic Key Value</p><p>于是崧崧给小雨苹果1，苹果2；给小宇香蕉1，香蕉2.</p><p>小雨和小宇都把水果给小爱。小雨给的顺序是苹果1，苹果2，小宇给的顺序是香蕉1，香蕉2.<strong>同分区内顺序固定，不同分区顺序不固定。</strong><br>崧崧生产了苹果1、苹果2，香蕉1，香蕉2.小爱收到的却可能是香蕉1、苹果1、苹果2、香蕉2.</p><h5 id="1-2-8-3-消费者组"><a href="#1-2-8-3-消费者组" class="headerlink" title="1.2.8.3 消费者组"></a>1.2.8.3 消费者组</h5><p>小爱是小仙女，小仙女吃不了四个果果，于是小爱找来了她的小伙伴：小佳。隔壁阿远听说有水果吃，于是也来了。阿远还带来了自己的好朋友阿近。<br>于是情况变成了如下样子：<br>生产者0：崧崧；broker0: partition0:小小雨，partition1:小宇 ；消费者组0：小小爱，小佳；消费者组1：阿远，阿近。<br>崧崧还是生产了四个果果。小雨传苹果，小宇传香蕉。消费者组0和1都订阅了“水果”主题。<br>结果是消费者组0和1各自都拿到了4个果果。组内小小爱吃苹果，小佳吃香蕉，阿远吃苹果，阿近吃香蕉。<br>不会出现小爱吃4个果果，小佳没得吃的情况，这得益于kafka的rebalance.<br>rebalance本质上是一种协议，规定了一个consumer group下的所有consumer如何达成一致来分配订阅topic的每个分区。<br>比如某个group下有20个consumer，它订阅了一个具有100个分区的topic。正常情况下，Kafka平均会为每个consumer分配5个分区。这个分配的过程就叫rebalance。<br>kafka分配小雨分区给小爱，小宇分区给小佳。<br>同时这也说明了为啥消费者不需要大于分区数。因为如果消费者组0再加入一个小伙伴小笨蛋，小笨蛋并不会被分配到任何分区，他就是干坐着吃不到果果。</p><h5 id="1-2-8-4-灾备"><a href="#1-2-8-4-灾备" class="headerlink" title="1.2.8.4 灾备"></a>1.2.8.4 灾备</h5><p>前面讲到了，每个分区都有他的备份分区。这个在建立主题的时候可以指定。但是一个broker上同分区的备份只能有1个。不然这个broker挂了，主从分区都死翘翘了，备份就没有意义了。<br>所以，单机环境下没有备份。<br>举个栗子。小雨和小宇是Q国人（broker0）,除此之外，还有W\E\R三个国家（broker1,2,3）.以前呢天灾常有，Q国时不时就被灭了，覆巢之下安有完卵，小雨和小宇也西内了。崧崧和消费者组0、1就再也联系不上了。<br>为了防止这种情况，kafka把小雨和小宇copy了三份，放到WER三国。认定Q国小雨是leader,另外三国小雨是follower.认定W国小宇是leader,另外三国小宇是follower.<br>从此消费者从Q.小雨拿苹果，W.小宇拿香蕉。<br>有一天，Q又被洪水淹了，Q.小雨翘辫子了，于是kafka重新划定，E.小雨是leader,WR两国小雨是从属。<br>这样就保证了broker挂了，服务也能正常运行。</p><p>同样的，多个消费者也具有一定的灾备能力。阿近挂了，kafka触发rebalance,把苹果和香蕉分区都分给阿远。</p><hr><p>当这里，相信你对kafka的主要角色有了个大体的了解，深入的内容在后续章节中更新,大致还有两三章~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kafka </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以前端指定的model为返回值</title>
      <link href="2021/04/12/%E4%BB%A5%E5%89%8D%E7%AB%AF%E6%8C%87%E5%AE%9A%E7%9A%84model%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
      <url>2021/04/12/%E4%BB%A5%E5%89%8D%E7%AB%AF%E6%8C%87%E5%AE%9A%E7%9A%84model%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起因是想写一个通用的方法，在访问固定结构的表（一般是配置表）时，可以返回对应的model.写个通用的方法，每当新增需求的时候加个model就好了，不用重复开发。<br>蓝鹅这个方案被否定了，原因是大佬认为反射性能不高，尽量少使用。于是谨在此记录一下这种方式。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     *获取以model形式返回的config     * @param configCode 配置的code     * @param modelName 返回的model的名字     * @param packagePath model类的位置，默认不用传     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getConfigWithModel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">getConfigWithModel</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"configCode"</span><span class="token punctuation">)</span> String configCode<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"modelName"</span><span class="token punctuation">)</span> String modelName<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"packagePath"</span><span class="token punctuation">,</span> defaultValue<span class="token operator">=</span> <span class="token string">"包的位置."</span><span class="token punctuation">)</span> String packagePath<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map configWithModel <span class="token operator">=</span> systemConfigService<span class="token punctuation">.</span><span class="token function">getConfigWithModel</span><span class="token punctuation">(</span>configCode<span class="token punctuation">,</span> modelName<span class="token punctuation">,</span> packagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map <span class="token function">getConfigWithModel</span><span class="token punctuation">(</span>String configCode<span class="token punctuation">,</span>String modelName<span class="token punctuation">,</span>String packagePath<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classType<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>packagePath<span class="token operator">+</span>modelName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取所有属性</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> field <span class="token operator">=</span> classType<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SystemConfig configByCode <span class="token operator">=</span> <span class="token function">getConfigByCode</span><span class="token punctuation">(</span>configCode<span class="token punctuation">)</span><span class="token punctuation">;</span>            JSONObject jsonObject <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>configByCode<span class="token punctuation">.</span><span class="token function">getConfigValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>field<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>field<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>field<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INSERT ... ON DUPLICATE KEY UPDATE产生death lock死锁原理</title>
      <link href="2021/03/30/INSERT_ON_DUPLICATE_KEY_UPDATE/"/>
      <url>2021/03/30/INSERT_ON_DUPLICATE_KEY_UPDATE/</url>
      
        <content type="html"><![CDATA[<p>今日分享 INSERT … ON DUPLICATE KEY UPDATE产生death lock死锁原理<br>使用场景：对数据库插入某字段，不存在就插入，存在就更新<br>死锁条件：并发条件下对同一条数据进行操作<br>死锁原因：操作流程<br>    ①获取这条记录所在行的共享锁，<br>    ②进行update操作（未写入），<br>    ③获取这行的排他锁，<br>    ④写入，<br>    ⑤释放排他锁和共享锁。<br>因为共享锁可以被反复获取，但是获取排他锁前需要共享锁被释放，所以造成死锁。</p><p>解决方法：并发条件下不要用 INSERT … ON DUPLICATE KEY UPDATE，而且DUPLICATE KEY 对数据库开销也略大</p><p>详见<a href="https://blog.csdn.net/pml18710973036/article/details/78452688" target="_blank" rel="noopener">https://blog.csdn.net/pml18710973036/article/details/78452688</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理和jdk动态代理</title>
      <link href="2021/03/30/proxy/"/>
      <url>2021/03/30/proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><blockquote><p>首先用代码模拟一个容易理解的现实场景，来解释到底什么是代理模式。<br>市面上流行的游戏主机有三种，PS,NS和XBOX，三足鼎立雄踞游戏市场。<br>这三个游戏机都支持最基础的游戏功能，但是随着发展出现了一些外部设备来增强这些游戏机的游戏体验。<br>这种增强就是在原游戏机主机的基础上，附加了很多新的功能，比如摄像头啊、健身环啊。<br>用代码表示这种关系，可以用装饰者模式，也可以用代理模式。这里我们用代理模式来实现这个关系。</p></blockquote><p>模拟：</p><ol><li><p>游戏机接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GameStation</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟PS</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayStation</span> <span class="token keyword">implements</span> <span class="token class-name">GameStation</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是PS，我的游戏最多最好玩。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟NS</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NintendoSwitch</span> <span class="token keyword">implements</span> <span class="token class-name">GameStation</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是次世代zui强的主机NS~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟PS的各种外设代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayStationProxy</span> <span class="token keyword">implements</span> <span class="token class-name">GameStation</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> PlayStation playStation<span class="token punctuation">;</span> <span class="token function">PlayStationProxy</span><span class="token punctuation">(</span>PlayStation pojo<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>playStation <span class="token operator">=</span> pojo<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自我介绍："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>playStation<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>playStation<span class="token punctuation">.</span><span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体感摄像头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>模拟NS的各种代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NintendoSwitchProxy</span> <span class="token keyword">implements</span> <span class="token class-name">GameStation</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> NintendoSwitch nintendoSwitch<span class="token punctuation">;</span> <span class="token function">NintendoSwitchProxy</span><span class="token punctuation">(</span>NintendoSwitch pojo<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nintendoSwitch <span class="token operator">=</span> pojo<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自我介绍："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nintendoSwitch<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nintendoSwitch<span class="token punctuation">.</span><span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"健身环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>说明： 可见，代理类（4 PlayStationProxy，5 NintendoSwitchProxy）对被代理的对象（2 ps，3 ns）进行了功能的增强。getDesc方法增强都是多加了一句描述（增强内容相同），getEquipment方法增强了各自的外部设备（增强内容不同）。<br>这种增强的实现方式是代理类4 PlayStationProxy和被代理对象2 ps共同实现同一个接口1，代理类4 PlayStationProxy维持了一个2 ps的实例。当测试类调用时，调用代理类4 PlayStationProxy，就可以使用到被代理对象2 ps的方法，同时这个方法被增强了。</p><p>这就是代理模式，不对被代理类本身修改，而是通过实现同一个接口，对新的实现类（即代理类）进行修改增强。</p><p>以上这种实现方式就是静态代理。为啥叫静态的，因为对PS和NS分别需要两个代理类，即使他们的方法名是一样的，都是实现了同一个接口，增强的内容也是一样的。</p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>动态代理有几个主要角色类，1.被代理类ps；2.被代理类ns; 3.生产代理对象的工具类ProxyUtil; 4.InvocationHandler的实现类<br>JDK动态代理和静态代理的区别就是，当增强的内容一样的时候，动态代理类可以一类多用，不需要为每个被代理类生产代理对象。<br>假如我们的需求仅仅是增强getDesc方法，那么我们需要下面几个类</p><p>3.生产代理对象的工具类ProxyUtil,这个方法获得了一个同样的代理类，可以对ps和ns代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//绑定代理类和被代理类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建代理类proxy,绑定被代理类object</span>        GameStationProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameStationProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *         调用Proxy.newProxyInstance获取代理对象实例         *         参数1：被代理类的类加载器         *         参数2：被代理对象的所有接口         *         参数3：定义了具体如何增强被代理类的代理类         */</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.InvocationHandler的实现类<br>生产通用代理类需要一个class com.sun.proxy.$Proxy0类，这个类定义了具体如何增强方法。这个类的创建仅需要实现InvocationHandler的invoke放法即可。<br>就是在invoke里定义了怎么增强被代理类的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameStationProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理类</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token function">GameStationProxy</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理类调用方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"getDesc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自我介绍："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用被代理类的方法</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义被代理ps</span>        PlayStation ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理类实例</span>        GameStation proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>GameStation<span class="token punctuation">)</span> ProxyUtil<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用代理类的方法</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">getEquipment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：<br>主机<br>自我介绍：<br>我是PS，我的游戏最多最好玩。</p><h2 id="JDK动态代理的深入研究"><a href="#JDK动态代理的深入研究" class="headerlink" title="JDK动态代理的深入研究"></a>JDK动态代理的深入研究</h2><p>如上我们就实现了动态代理，不论再来几种游戏机，不论是xbox还是小霸王，都不需要再新建代理类了。<br>但是又有个疑问，如果我相对PS和NS的getEquipment方法增强要怎么实现呢?他们增强的方式是不一样的。<br>ps是体感摄像头和VR，ns是健身环.</p><p>于是我对InvocationHandler的实现类的实现类进行改造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameStationProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理类</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token function">GameStationProxy</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理类调用方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//getDesc增强</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"getDesc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自我介绍："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getEquipment增强</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"getEquipment"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//增强</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy <span class="token keyword">instanceof</span> <span class="token class-name">GameStation</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体感摄像头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy <span class="token keyword">instanceof</span> <span class="token class-name">NintendoSwitch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"健身环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用被代理类的方法</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个写法挺想当然的，测试后发现并没有被增强。于是去看了看instanceof的实现方法：<br>boolean result;<br>if (obj == null) {<br>  result = false;<br>} else {<br>  try {<br>      T temp = (T) obj;<br>      result = true;<br>  } catch (ClassCastException e) {<br>      result = false;<br>  }<br>}</p><p>这个方法的实现方式就是先判断 A instanceof B 中，A是不是空，如果是空，那A能不能强转为B。<br>强转异常，就捕获了返回false.顺带提一嘴，在很多业务中都可以用类似的结构。<br>或者对主流程不影响的代码块，也可以捕获但是不抛出。打个日志就好了。</p><p>看到这里就知道，是我对proxy的理解不对。我以为proxy 是ps ,ns ，即被代理类。<br>但是System.out.println(proxy.getClass().toString());打印发现其实是class com.sun.proxy.$Proxy0，即代理类。</p><p>那代理类到底是什么构成，用一个测试类来看看：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里指定被代理类</span>            GameStation rs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PlayStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InvocationHandler ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GameStationProxy</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//以下是一次性生成代理</span>            GameStation subject<span class="token operator">=</span><span class="token punctuation">(</span>GameStation<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                    cls<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里可以通过运行结果证明subject是Proxy的一个实例，这个实例实现了Subject接口</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject <span class="token keyword">instanceof</span> <span class="token class-name">Proxy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里可以看出subject的Class类是$Proxy0,这个$Proxy0类继承了Proxy，实现了Subject接口</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"subject的Class类是："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"subject中的属性有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> field<span class="token operator">=</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Field f<span class="token operator">:</span>field<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"subject中的方法有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method<span class="token punctuation">[</span><span class="token punctuation">]</span> method<span class="token operator">=</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Method m<span class="token operator">:</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"subject的父类是："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"subject实现的接口是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token operator">=</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> i<span class="token operator">:</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><blockquote><p>true<br>  subject的Class类是：class com.sun.proxy.$Proxy0<br>  subject中的属性有：m1, m4, m2, m3, m0,<br>  subject中的方法有：equals, toString, hashCode, getDesc, getEquipment,<br>  subject的父类是：class java.lang.reflect.Proxy<br>  subject实现的接口是：com.anonymous.template.abstract_factory.proxy_test.GameStation, </p></blockquote><p>由此可见，class com.sun.proxy.$Proxy0继承了Proxy，实现了GameStation，真相大白。</p><p>但是可是，我们的问题依然没有解决，还是无法对getEquipment增强。<br>其实方法是有的，就是针对不同被代理类，创建不同的代理类。如果ps和xbox都是体感摄像头和vr,那他俩就公用一个代理类，ns是健身环，没人和他一样，他就单独用一个代理类。<br>这个实现方法看起来挺搓的，但是我查了一些解决方案都是这样。这种方法也是一种设计模式的实现原理，即抽象工厂模式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁的几种实现方式</title>
      <link href="2021/03/30/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>2021/03/30/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式锁的几种实现方式"><a href="#分布式锁的几种实现方式" class="headerlink" title="分布式锁的几种实现方式"></a>分布式锁的几种实现方式</h2><h4 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h4><p>1.1 表记录锁</p><p>搞一张表来记录锁的信息。id（锁住的时间，创建时间，balabala），要加锁时插入数据，释放锁时删除数据。</p><p>1.2 乐观锁</p><p>加版本号。</p><p>1.3 悲观锁</p><p>查询条件后加for update,十分容易锁表，珍惜生命菜鸡少用/(ㄒoㄒ)/~~</p><p>1.4 唯一索引</p><p>市面上的项目中基本都是这个（也就百分之98吧）。</p><p>参考链接：<a href="https://blog.csdn.net/u013256816/article/details/92854794" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/92854794</a></p><p>问题：如果我对数据库进行分库分表，且冗余全量，是不是就不能用数据库实现分布式锁了？或者是要结合事务实现吗？</p><h4 id="2-redis"><a href="#2-redis" class="headerlink" title="2. redis"></a>2. redis</h4><p>加锁：set个值进去；释放锁：del key</p><p>参考链接：<a href="https://www.jianshu.com/p/a1ebab8ce78a" target="_blank" rel="noopener">https://www.jianshu.com/p/a1ebab8ce78a</a> </p><h4 id="3-zookeepr"><a href="#3-zookeepr" class="headerlink" title="3.zookeepr"></a>3.zookeepr</h4><p>使用zookeeper第三方库Curator封装好的方法。</p><p>​        InterProcessMutex lock = new InterProcessMutex(zkClient, lockPath);   </p><p>加锁：lock.acquire();  释放锁：lock.release(); </p><p>原理：利用zookeeper的临时顺序节点，参考：<a href="https://blog.csdn.net/wuzhiwei549/article/details/80692278" target="_blank" rel="noopener">https://blog.csdn.net/wuzhiwei549/article/details/80692278</a></p><p>实际应用参考（代码咋写）：<a href="https://blog.csdn.net/hosaos/article/details/89521537" target="_blank" rel="noopener">https://blog.csdn.net/hosaos/article/details/89521537</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoftReference</title>
      <link href="2020/11/25/SoftReference/"/>
      <url>2020/11/25/SoftReference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起因是大佬代码里的jvm缓存使用了软引用，一眼看过去，没有set值的地方，感到困惑。就针对SoftReferenc粗略学习了一番。<br>网上都有哪些balabala就不讲了，直接看代码吧。</p></blockquote><p>以下这段代码，o和o1是同一个对象，但是他们的属性值b变了。读者可以debug看看。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">tempTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token string">"xoxoxoo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoftReference sfB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span> <span class="token punctuation">(</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> sfB<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token string">"jajja"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o1 <span class="token operator">=</span> sfB<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String b<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span>String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这就是因为softReference持有了B的引用，其实再new 一个B的对象b2,将b的引用赋值给b2，产生的效果是一样的。<br>区别不过是SoftReference 这玩意儿能持有一个对象的引用，且只有在内存满时才被回收。</p><hr><p>再看如下代码,s1,s2的值一样吗？</p><pre class=" language-java"><code class="language-java">    String value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"sfasf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SoftReference sfRefer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span> <span class="token punctuation">(</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span>    String s1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sfRefer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    value<span class="token operator">=</span><span class="token string">"hahaha"</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sfRefer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>肯定是不一样的，因为String是final类型的。如果不能理解，带入String st=value;去想就明白了。</p><hr><p>顺便一提，String 和 Long、Integer、Double、Short、Byte  等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。<br>如果你仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：类和属性都是 final 的，所有方法均是只读的。 </p><p>其实这几个类不仅是final类型的，还用到了一种设计模式：享元模式（Flyweight Pattern）。<br>利用享元模式可以减少创建对象的数量，从而减少内存占用。上面提到的这些基本数据类型的包装类都用到了享元模式。</p><p>享元模式本质上就是一个对象池，因为对象全都不可变，所以变化的是对对象的引用。<br>利用享元模式创建对象的逻辑也很简单：创建之前，首先去对象池里看看是不是存在；如果已经存在，就利用对象池里的对象；如果不存在，就会新创建一个对象，并且把这个新创建出来的对象放进对象池里。</p><p>Long甚至对享元做了优化。Long 内部维护了一个静态的对象池，缓存了[-128,127]之间的数字（Long 这个对象全部缓存太多了，只缓存利用率最高的这部分），这个对象池在 JVM 启动的时候就创建好了，而且这个对象池是静态不变的。<br>下面的示例代码出自 Java 1.8，valueOf() 方法就用到了 LongCache 这个缓存。<br>这个方法关于下标的确定和转换也非常有意思~</p><pre class=" language-java"><code class="language-java">Long <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [-128,127]直接的数字做了缓存</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> LongCache      <span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//缓存，等价于对象池</span><span class="token comment" spellcheck="true">//仅缓存[-128,127]直接的数字</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LongCache</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> Long cache<span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分享完毕，拜<del>~</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SoftReference </tag>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个小树洞03（集成redis、异步线程、ElasticSearch、ik分词）</title>
      <link href="2020/10/16/blog_project_03/"/>
      <url>2020/10/16/blog_project_03/</url>
      
        <content type="html"><![CDATA[<blockquote><p>书接上回，在构建项目的过程中，我们发现有一些优化点，所以本篇对这些内容做一些处理。</p></blockquote><h2 id="集成redis"><a href="#集成redis" class="headerlink" title="集成redis"></a>集成redis</h2><p>下载安装无需赘言，整合过程参考<a href="https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html#!comments%E3%80%82" target="_blank" rel="noopener">https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html#!comments。</a></p><p>然后对上传方法改造如下（hash结构）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Map <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile picture<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> params<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> File<span class="token operator">></span> image<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"smfile"</span><span class="token punctuation">,</span> MultipartFileToFile<span class="token punctuation">.</span><span class="token function">multipartFileToFile</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目前还未接入用户系统，以后userId会换成真正的id</span>        Object repeatUrl <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> picture<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>repeatUrl<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            rt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>repeatUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String result <span class="token operator">=</span> HttpUtil<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://sm.ms/api/v2/upload"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>        String url<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span>  Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"image_repeated"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisUtil<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>picture<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        rt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rt<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>顺便了解一下缓存穿透和缓存雪崩。</p><blockquote><p>缓存穿透：即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><p>解决方案:<br> (一)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试<br> (二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。<br> (三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p></blockquote><blockquote><p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p><p>解决方案:<br> (一)给缓存的失效时间，加上一个随机值，避免集体失效。<br> (二)使用互斥锁，但是该方案吞吐量明显下降了。<br> (三)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点<br> I 从缓存A读数据库，有则直接返回<br> II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。<br> III 更新线程同时更新缓存A和缓存B。</p></blockquote><p>不过如果有配置网关，其实不会发生缓存穿透的问题。</p><h2 id="统一返回值"><a href="#统一返回值" class="headerlink" title="统一返回值"></a>统一返回值</h2><p>这个没啥好说的，封装一个model就好啦，详细可以去代码里看。最后返回结果变成这个样子：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"9999"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://i.loli.net/2020/10/16/qMZ7zrLEv2idsOQ.png"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>顺便把上传接口中的异常处理一下，该加的日志加一加，这部分也不赘述了。</p><h2 id="厘清发布文章接口调用顺序"><a href="#厘清发布文章接口调用顺序" class="headerlink" title="厘清发布文章接口调用顺序"></a>厘清发布文章接口调用顺序</h2><p>本来想画个泳道图，再想也没那么复杂。直接看描述吧。 </p><ol><li>用户在编辑框内编辑文本，上传图片等———-①调用上传图片接口，拿到地址，前端替换文本中base64图片（根据不同编辑器可能不同，但是都是这么个意思）内容。</li><li>用户选择发布选项（可见度、tag等）。</li><li>【1】用户存草稿—————-②保存文章，状态为草稿。<br>【2】用户发布——————②文章有无tag？有进入下一步，无则调用分词接口，从标题提取关键字（异步）。③保存文章，状态为发布。</li></ol><p>因为文章标签不属于优先级很高的数据，所以如果用户没有指定标签，那么程序添加标签的功能可以异步去做。前端一开始取不到标签字段，就展示没有标签，或者标签正在生成。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map <span class="token function">insertArticle</span><span class="token punctuation">(</span>ArticleReq req<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bArticleMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>ArticleReq<span class="token punctuation">.</span><span class="token function">convertToPojo</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果没有标签，异步调用分词</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">elasticTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">elasticTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//分词</span>                <span class="token comment" spellcheck="true">//更新tags字段</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//异步添加分词线程池</span>        Integer poolNumInit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Integer queueNumInit <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                poolNumInit<span class="token punctuation">,</span> poolNumInit<span class="token punctuation">,</span> 1000L<span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span>queueNumInit<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 遇到队列满的情况抛弃</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始加载分词线程池..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="ik"><a href="#ik" class="headerlink" title="ik"></a>ik</h2><p>为了实现分词功能，需要使用ik.IK Analyzer 是一个开源的，基于java语言开发的轻量级的中文分词工具包。<br>我们使用ik实现tag标签的提取。另外还有一个和ik相关的内容是elastic search，这是个可以集成ik的全文检索数据库。后续实现根据内容搜索文章时需要用到，在本文的后面会将es的环境一并搭建。</p><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><p>导入依赖：</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--ik--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.janeluo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ikanalyzer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2012_u6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-调用方法"><a href="#2-调用方法" class="headerlink" title="2.调用方法"></a>2.调用方法</h3><p>因为更新文章标签的方法是异步的，所以要先拿到插入文章时那条记录的id.这需要对xml做一点点改动，在insert标签上加上useGeneratedKeys=”true” keyProperty=”id”.<br><img src="https://i.loli.net/2020/10/26/Gb9W6g7dLzO45CK.png" alt="img"><br>注意这个返回主键，并不是返回值变为主键，而是相当于把主键set进pojo对象里。<br>另外做到这一步，笔者发现之前表设计有问题，当数据量大的时候，主键不应该采用int类型，而是varchar32位更为实用。于是在此处更改了id的数据类型。<br>增加分词后的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertArticle</span><span class="token punctuation">(</span>ArticleReq req<span class="token punctuation">)</span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BArticle bArticle <span class="token operator">=</span> ArticleReq<span class="token punctuation">.</span><span class="token function">convertToPojo</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        bArticleMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>bArticle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果没有标签，异步调用分词</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">elasticTags</span><span class="token punctuation">(</span>bArticle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">elasticTags</span><span class="token punctuation">(</span>BArticle bArticle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//分词</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ik</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> bArticle<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新tags字段</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tags<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bArticle<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span>tags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//各种原因未分词成功，归为“未分类”标签兜底</span>                    bArticle<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"未分类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                bArticleMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>bArticle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ik</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> tags<span class="token punctuation">,</span> String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringReader sr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        IKSegmenter ik<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IKSegmenter</span><span class="token punctuation">(</span>sr<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lexeme lex<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lex<span class="token operator">=</span>ik<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                tags<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lex<span class="token punctuation">.</span><span class="token function">getLexemeText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果分词错误，这篇文章就没有tag，归为“未分类”标签兜底</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"ik分词错误：{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接口调用成功，可见成功分词。如果觉得这个分词还不够精准，可以自定义字典。这部分后续有需要再补充。<br>另外读者可以在分词方法上打个断点，可见调用该方法前，前端已经接收到返回值。<br><img src="https://i.loli.net/2020/10/26/9nuoOKJcAMwBiC4.jpg" alt="img"></p><h2 id="elastic"><a href="#elastic" class="headerlink" title="elastic"></a>elastic</h2><p>为了实现全文检索功能，需要安装ElasticSearch服务。参考教程<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html%E3%80%82" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html。</a><br>由于cmd中很多命令都没有，需要安装个虚拟机用以安装服务，参考教程：<a href="https://www.cnblogs.com/weixuqin/p/10997534.html%E3%80%82" target="_blank" rel="noopener">https://www.cnblogs.com/weixuqin/p/10997534.html。</a><br>linux安装java jdk，参考教程：<a href="https://blog.csdn.net/zbj18314469395/article/details/86064849%E3%80%82" target="_blank" rel="noopener">https://blog.csdn.net/zbj18314469395/article/details/86064849。</a><br>感谢humBlesOng的帮助(　o=^•ェ•)o　┏━┓ （应本人要求加个链接：<a href="https://humblesong.github.io/%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%BF%AB%E5%8E%BB%E5%82%AC%E6%9B%B4~~~%EF%BC%89" target="_blank" rel="noopener">https://humblesong.github.io/，大家快去催更~~~）</a><br>安装好之后在linux里简单操作一下，对数据结构和名词有个概念。</p><blockquote><p>由于elastic、ik和sdk版本间的问题，读者可能会在这里遇到很多版本冲突的bug.<br>请参考这两个链接 <a href="https://blog.csdn.net/weixin_34150830/article/details/91910735" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34150830/article/details/91910735</a><br><a href="https://blog.csdn.net/wzz87/article/details/106419696/" target="_blank" rel="noopener">https://blog.csdn.net/wzz87/article/details/106419696/</a><br>或者觉得比较麻烦，可以直接导入如下依赖。</p></blockquote><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport-netty4-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后把上面的连接里的代码跑一跑，注意换成我们自己的index和type。<br>GetResponse response = client.prepareGet(“accounts”, “person”, articleId).get();</p><p>用postman调一下，得到如下结果，至此环境准备完毕，后续做搜索功能时我们再深入研究。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"person"</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>    <span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"数据库管理"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"sourceEmpty"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"sourceAsBytes"</span><span class="token operator">:</span> <span class="token string">"CnsKICAidXNlciI6ICLlvKDkuIkiLAogICJ0aXRsZSI6ICLlt6XnqIvluIgiLAogICJkZXNjIjogIuaVsOaNruW6k+euoeeQhiIKfQ=="</span><span class="token punctuation">,</span>    <span class="token property">"sourceAsMap"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"数据库管理"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"exists"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"sourceInternal"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"childResources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"sourceAsString"</span><span class="token operator">:</span> <span class="token property">"\n{\n  \"user\": \"张三\",\n  \"title\": \"工程师\",\n  \"desc\"</span><span class="token operator">:</span> \<span class="token string">"数据库管理\"\n}"</span><span class="token punctuation">,</span>    <span class="token property">"sourceAsBytesRef"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"childResources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"fragment"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>如果再次启动报错，记得在启动类加上如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.vvf.practice.blog.dal.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * Springboot整合Elasticsearch 在项目启动前设置一下的属性，防止报错         * 解决netty冲突后初始化client时还会抛出异常         * java.lang.IllegalStateException: availableProcessors is already set to [8], rejecting [8]         */</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"es.set.netty.runtime.available.processors"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>BlogApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 练习项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> redis </tag>
            
            <tag> thread </tag>
            
            <tag> ik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个小树洞02（接入图片服务，HttpURLConnection自定义http post请求）</title>
      <link href="2020/10/15/blog_project_02/"/>
      <url>2020/10/15/blog_project_02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天着手做个基础功能：写博客。我们先不纠结前端，postman就是最好的页面(●ˇ∀ˇ●)。<br>大致有这么几个需求：</p><ol><li>用户可以插入新文章；</li><li>插入文章可以选择可见对象（级别：全部可见、粉丝可见、好友可见、黑名单不可见）；</li><li>未提交的部分保存在草稿箱；</li><li>用户可以给文章设置TAG，未设置将从文章标题提取关键字；</li><li>封面图片服务；</li></ol></blockquote><p>VV就按心情写啦<del>~</del>毕竟没有用户，我就是爸爸(　o=^•ェ•)o　┏━┓嗷嗷嗷肚子痛</p><p>嗷嗷哦啊我回来了，痛痛哭哭/(ㄒoㄒ)/~~</p><h2 id="接入图片服务"><a href="#接入图片服务" class="headerlink" title="接入图片服务"></a>接入图片服务</h2><p>使用SM.MS的免费服务，文档地址：<a href="https://doc.sm.ms/#api-User-Get_Token" target="_blank" rel="noopener">https://doc.sm.ms/#api-User-Get_Token</a></p><p>参考文档，找出我们需要的接口，即上传接口（实际使用时还可能用得到删除接口，但是我们只是举个栗子，所以先实现上传接口就好了）。<br>请参考Upload - Upload Image这个接口，关注它的请求类型和入参（Authorization可以不传），在postman中试着调一下，成功~<br><img src="https://i.loli.net/2020/10/12/8Oz2GFiLsgm7qBZ.jpg" alt="img"><br>那么就是说只要取返回值里的url字段，就能拿到我们需要的值了。但是这里要注意，如果同样的请求重复一次，返回值结构变化了，后续代码中要注意处理这个问题。<br>避免用户上传图片后删除，之后又上传的情况。<br><img src="https://i.loli.net/2020/10/12/o8zlq72BXnS9kVY.jpg" alt="img"></p><p>要请求外部接口，首先需要一个类帮助我们处理连接和数据传输。这里叫HttpUtil.这个工具类网上一搜有很多，笔者发现了一个用java8写的，同时内容精简可靠的工具类。<br>拿来研究一下，特别感谢作者“纠结的猫”源地址：<a href="https://www.cnblogs.com/paranoidCAT/p/13695276.html" target="_blank" rel="noopener">https://www.cnblogs.com/paranoidCAT/p/13695276.html</a><br>这个工具类只有两个共有方法，一个get一个post，于是我们从这里入手就好。<br><img src="https://i.loli.net/2020/10/12/xCqybhOXHB7NFWJ.png" alt="img"><br><img src="https://i.loli.net/2020/10/12/dUNO6sWClhgVt8L.png" alt="img"><br>同时可以关注下Collections的emptyList() emptyMap() emptySet()方法。这三个方法主要作用有以下两点，这里用到的就是第二点（引用自：<a href="https://blog.csdn.net/zwt0909/article/details/52426787%EF%BC%89%EF%BC%9A" target="_blank" rel="noopener">https://blog.csdn.net/zwt0909/article/details/52426787）：</a></p><ul><li><p>方法内部会返回static final成员，创建后相当于常量可重复引用，当需要使用一个空集合时不用new去分配内存，比如一个测试用例API接口就需要一个Map&lt;String,Object&gt;,若此时只需要一个空map跑用例，直接用Collections.emptyMap()作为参数即可</p></li><li><p>防止空指针出现，当你的代码需要一个集合而这个集合可能不存在，此时尽量使用空集合而不是null，因为集合一个常用的操作就是遍历，你不知道你返回的结果在后续会不会被遍历。比如一个查询步骤返回一个集合，当返回一个空集合是就可以用这类方法，还可以防止后续对这个空集合再做add操作</p></li></ul><p>但是我们发送请求的时候还需要特殊处理，因为发送的请求中有图片，也有String类型的参数。找了找没有成熟的工具类，于是只能自己根据标准请求报文拼一个。<br>需要拼成的报文是这样的(参考地址：<a href="https://www.cnblogs.com/yuwei0911/p/8601542.html)%EF%BC%9A" target="_blank" rel="noopener">https://www.cnblogs.com/yuwei0911/p/8601542.html)：</a></p><blockquote><p>POST报文格式<br>  POST /api/feed/ HTTP/1.1<br>  Accept-Encoding: gzip<br>  Content-Length: 225873<br>  Content-Type: multipart/form-data; boundary=OCqxMF6-JxtxoMDHmoG5W5eY9MGRsTBp<br>  Host: <a href="http://www.myhost.com/" target="_blank" rel="noopener">www.myhost.com</a><br>  Connection: Keep-Alive</p><p> –OCqxMF6-JxtxoMDHmoG5W5eY9MGRsTBp<br>  Content-Disposition: form-data; name=”lng”<br>  Content-Type: text/plain; charset=UTF-8<br>  Content-Transfer-Encoding: 8bit</p><p> 116.361545<br>  –OCqxMF6-JxtxoMDHmoG5W5eY9MGRsTBp<br>  Content-Disposition: form-data; name=”lat”<br>  Content-Type: text/plain; charset=UTF-8<br>  Content-Transfer-Encoding: 8bit</p><p> 39.979006<br>  –OCqxMF6-JxtxoMDHmoG5W5eY9MGRsTBp<br>  Content-Disposition: form-data; name=”images”; filename=”/storage/emulated/0/Camera/jdimage/1xh0e3yyfmpr2e35tdowbavrx.jpg”<br>  Content-Type: application/octet-stream<br>  Content-Transfer-Encoding: binary</p><p> 这里是图片的二进制数据<br> –OCqxMF6-JxtxoMDHmoG5W5eY9MGRsTBp–</p></blockquote><p>–balbalaaaa这个是数据分割线，具体是什么没有要求，可以使用时间戳。请求报文参数以数据分割线开头，并以其结束。参数的key放在name里，空一行后写value。<br>直接描述可能有点抽象，上述例子中提交了三个参数：{“lng”:”116.361545”,”lat”:”39.979006”,”images”:”图片数据”},根据这个来仔细看看，就能看懂了哦。<br>注意报文格式是固定的，所以空行不能省略，也不能乱加。<br>如下是改造后的方法，注释已经写在上面啦：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//数据分割线</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BOUNDARY <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">post</span><span class="token punctuation">(</span>String urlStr<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">,</span>                                   Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> File<span class="token operator">></span> images<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpURLConnection con <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//一些post请求的设置</span>            con<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setUseCaches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Charset"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不添加这个设置会报403，包含了操作系统、安全等级、浏览器语言等设置</span>            con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>                    <span class="token string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN; rv:1.9.2.6)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"multipart/form-data; boundary="</span><span class="token operator">+</span> BOUNDARY<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//换行符</span>            <span class="token keyword">final</span> String newLine <span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//请求报文特定字符</span>            <span class="token keyword">final</span> String boundaryPrefix <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加请求参数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> s <span class="token operator">:</span> params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>boundaryPrefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>BOUNDARY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: form-data;name=\""</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\""</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/plain; charset=UTF-8"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Transfer-Encoding: 8bit"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果请求中包含图片</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>images <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                StringBuffer strBf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                strBf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>boundaryPrefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>BOUNDARY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: form-data;name=\"smfile\";filename=\""</span> <span class="token operator">+</span> images<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"smfile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\"\r\n"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Type:application/octet-stream\r\n"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Transfer-Encoding: binary"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>strBf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DataInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>                        images<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"smfile"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 每次读1KB数据,并且将文件数据写入到输出流中</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytes <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bufferOut<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferOut<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 报文结尾</span>            <span class="token comment" spellcheck="true">// 最后添加换行</span>            dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>newLine<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定义最后数据分隔线，即--加上BOUNDARY再加上--。</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end_data <span class="token operator">=</span> <span class="token punctuation">(</span>newLine <span class="token operator">+</span> boundaryPrefix <span class="token operator">+</span> BOUNDARY <span class="token operator">+</span> boundaryPrefix <span class="token operator">+</span> newLine<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写上结尾标识</span>            dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>end_data<span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取结果</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                    con<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String result<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">+=</span> line<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们拼成的结果如下：</p><blockquote><p>–1602750478879<br>  Content-Disposition: form-data;name=”format”<br>  Content-Type: text/plain; charset=UTF-8<br>  Content-Transfer-Encoding: 8bit</p><p> json<br>  –1602750478879<br>  Content-Disposition: form-data;name=”smfile”;filename=”1197821D-B377-4b07-B761-058027C69A6F.jpg”<br>  Content-Type:application/octet-stream<br>  Content-Transfer-Encoding: binary</p><p> �����Exif…很长很长长长…</p><p>–1602750478879–  </p></blockquote><p>至此工具类完成，那么对结果进行处理。注意有两种结果：</p><blockquote><p>第一次请求：<br>{“success”:true,”code”:”success”,”message”:”Upload success.”,”data”:{“file_id”:0,”width”:170,”height”:170,”filename”:”31310908.jpg”,”storename”:”iSxvh37G5C1Y2rE.jpg”,”size”:6094,”path”:”/2020/10/15/iSxvh37G5C1Y2rE.jpg”,”hash”:”4YXsu39vchnqRM7WU5FxJBiyo8”,”url”:”https://i.loli.net/2020/10/15/iSxvh37G5C1Y2rE.jpg”,”delete”:”https://sm.ms/delete/4YXsu39vchnqRM7WU5FxJBiyo8”,”page”:”https://sm.ms/image/iSxvh37G5C1Y2rE”},”RequestId”:”FA52D32F-337B-46D4-8062-7912047FD2ED”}</p></blockquote><blockquote><p>第二次请求：<br>{“success”:false,”code”:”image_repeated”,”message”:”Image upload repeated limit, this image exists at: https://i.loli.net/2020/10/15/8YVRXSvO97bzKB2.jpg”,”images”:”https://i.loli.net/2020/10/15/8YVRXSvO97bzKB2.jpg”,”RequestId”:”147C7F27-A8E4-48D2-B980-13A89E8B80E2”}</p></blockquote><p>service如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Map <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile picture<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> params<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> File<span class="token operator">></span> image<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"smfile"</span><span class="token punctuation">,</span> MultipartFileToFile<span class="token punctuation">.</span><span class="token function">multipartFileToFile</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> HttpUtil<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://sm.ms/api/v2/upload"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        String url<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            JSONObject data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"image_repeated"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            url<span class="token operator">=</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rt<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样就可以拿到图片上传后的地址了。不过还有很多可以优化的地方：</p><ol><li>返回值可以封装；</li><li>异常处理；</li><li>全局日志；</li><li>这个接口请求肉眼可见的很慢，所以对重复请求可以放到redis里处理；</li><li>这个方法里有些内容可以用java8优化。</li></ol><p>先处理第五点，优化后代码如下（但是感觉还不够优美，待后续打磨）：</p><pre class=" language-java"><code class="language-java">url <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span>  Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"image_repeated"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他优化点在后续会一一补全。在这篇先简单以postman请求结果结尾。<br><img src="https://i.loli.net/2020/10/15/iUVZQDrWoTyCLxO.jpg" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 练习项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> HttpURLConnection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个小树洞01（项目搭建、mybatis集成、mybatis源码）</title>
      <link href="2020/09/29/blog_project_01/"/>
      <url>2020/09/29/blog_project_01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;闲来无事，写个小东西，有空就把它丰满起来。你可认为它是个小树洞、轻博客，或者其他什么无关紧要的东西。需求不重要，毕竟产品经理是上厕所时的VV（没有错，就是我，但是以下我将避免使用“我”这个人称代词，以提高文章的装逼水平），需求文档的更新频率和如厕周期同步。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;总之，读者不必纠结于功能，重点是通过构建项目的过程中用到的方法和遇到的问题。因此这个系列会很长，内容也很分散。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;笔者尽量保证主线，维持读者的观感，亦期待对读者有所裨益。</p></blockquote><h2 id="version-0-0-1-就是这么快"><a href="#version-0-0-1-就是这么快" class="headerlink" title="version: 0.0.1 就是这么快"></a>version: 0.0.1 就是这么快</h2><p>博客需要的是什么呢？最重要的当然是读文章啦，所以酱酱酱酱<del>~</del>第一个版本诞生了耶比🎵<br><img src="https://i.loli.net/2020/09/28/lRrVec4JEOj5ApI.jpg" alt="img"><br><img src="https://i.loli.net/2020/09/28/DJCWEMf6ap7XFUw.jpg" alt="img"></p><p>多么简约大方的界面，多么清晰明了的项目结构，原来程序设计的尽头，是返璞归真专注基础……</p><p>别骂了别骂了我打住，开始正题哈~</p><h3 id="GetMapping和RequsetMapping"><a href="#GetMapping和RequsetMapping" class="headerlink" title="@GetMapping和RequsetMapping"></a>@GetMapping和RequsetMapping</h3><p>GetMapping,PostMapping,PutMapping,balalalMapping和RequestMapping到底是什么关系呢？</p><p>查看源码，发现其实很简单，GetMapping里指定了请求方式，是一种特殊的RequestMapping，因此可以比后者少传入一个请求方式参数。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>    method <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">GetMapping</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><h3 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h3><p>这俩兄弟的区别一向被列为表格，活跃于各种入门教程中，但是二者的特定只有在用过之后才能切身感觉到，特别是被要求get改post之后。</p><p>首先get是可见的，在url中可以看到请求的参数，这个特性决定了它是不安全的，所以敏感数据请求不可以使用get。<br>同时get限制了传输数据量的大小（2048个字符），如果你的入参有base64之类的长字符串，必须使用post请求。<br>get的有点在于效率比post高，是form表单默认的提交方式。</p><p>然而vv还是决定本项目中谨慎使用get.</p><h3 id="spring-boot-starter-parent"><a href="#spring-boot-starter-parent" class="headerlink" title="spring-boot-starter-parent"></a>spring-boot-starter-parent</h3><p>为什么springboot的项目里都需要有这个依赖，它到底干了什么？<br>它的主要作用其实很简单：</p><ul><li>指定编码格式默认使用utf-8。</li><li>指定java版本默认使用1.8。</li><li>提供Dependency Management进行项目依赖的版本管理，如指定实际依赖的版本号（已经做版本兼容性测试）。</li><li>默认的资源过滤和插件管理。</li></ul><p>其实就是它用来提供相关的Maven默认依赖，使用它之后，常用的包依赖可以省去version标签。理解为默认配置即可，不需要太过关注。</p><h2 id="version：0-1-0-接入数据库"><a href="#version：0-1-0-接入数据库" class="headerlink" title="version：0.1.0 接入数据库"></a>version：0.1.0 接入数据库</h2><blockquote><p>关于数据库的选择，VV纠结了一会儿，VV想用mongo,因为这是个拍大腿项目，数据结构可能会反复修改，用mysql就是自寻死路。<br>但是mysql又更加适合各种复杂联表查询，效率也更高一点……</p></blockquote><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><h4 id="1-建表"><a href="#1-建表" class="headerlink" title="1.建表"></a>1.建表</h4><p>想来还是用mysql吧，建表~</p><ul><li>担心表结构变化，所以加了三个拓展字段，后续也可以存一些json格式的内容。</li><li>冗余作者姓名字段，减少数据库操作</li><li>以主键和状态建立索引</li><li>以作者ID和状态建立索引</li></ul><pre><code>CREATE TABLE `b_article` (  `id` int(11) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `picture` varchar(2048) DEFAULT NULL COMMENT '封面图片',  `summary` varchar(255) DEFAULT NULL,  `text` longtext COMMENT '文章内容',  `text_type` varchar(255) DEFAULT NULL COMMENT '文章输入类型（markdown或者富文本）',  `author_id` int(11) DEFAULT NULL,  `author_name` varchar(255) DEFAULT NULL COMMENT '冗余作者名称，减少查询操作',  `tags` varchar(1024) DEFAULT NULL COMMENT '文章标签',  `status` varchar(3) DEFAULT NULL COMMENT '文章状态（0：草稿；1：部分发布；2：发布；3：回收站；4：删除）',  `type` varchar(255) DEFAULT NULL COMMENT '文章分类',  `create_time` datetime DEFAULT NULL,  `update_time` datetime DEFAULT NULL,  `params1` varchar(255) DEFAULT NULL COMMENT '扩展字段',  `params2` varchar(255) DEFAULT NULL,  `params3` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `ID_STATUS` (`id`,`status`),  KEY `AUTHOR_ID_STATUS` (`author_id`,`status`)) ENGINE=InnoDB DEFAULT CHARSET=utf8</code></pre><h4 id="2-生成数据库相关类"><a href="#2-生成数据库相关类" class="headerlink" title="2.生成数据库相关类"></a>2.生成数据库相关类</h4><p>没啥好说的，就建议两点：</p><ul><li>使用mybatis插件生成longtext类型时会hin奇怪，建议偷懒改成varchar，生成后再改回来。</li><li>善用lombok.</li></ul><h4 id="3-快速整合mybatis"><a href="#3-快速整合mybatis" class="headerlink" title="3.快速整合mybatis"></a>3.快速整合mybatis</h4><p>本着最小可用原则，笔者先不搞那些花里胡哨的配置，先引入就好。以下快速过一下~</p><ul><li>maven引用<pre><code>  &lt;dependency&gt;      &lt;groupId&gt;mysql&lt;/groupId&gt;      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;/dependency&gt;  &lt;dependency&gt;      &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;      &lt;version&gt;1.3.2&lt;/version&gt;  &lt;/dependency&gt;</code></pre></li><li>启动类添加@MapperScan({“com.vvf.practice.blog.dal.mapper”})</li><li>配置类添加<br>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC<br>spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</li><li>添加service，修改controller等</li></ul><p>然后就完成啦~用postman调用一下。成功(ง •_•)ง<br><img src="https://i.loli.net/2020/09/29/ceOkPnTrYXKvAHf.jpg" alt="img"></p><h3 id="更多思考——mybatis源码阅读记录"><a href="#更多思考——mybatis源码阅读记录" class="headerlink" title="更多思考——mybatis源码阅读记录"></a>更多思考——mybatis源码阅读记录</h3><p>vv斗胆来做一次mybatis源码分析，有误的地方欢迎指正。<br>首先阅读源码，需要搭建一个简洁的阅读环境，vv在version 0.1.0的基础上添加了mybatis配置xml，和一个简单的测试类。<br>后续这些内容都会提交github上，有需要的读者可以根据提交记录查看项目演进过程，并且自己亲手debug试一试。<br>或者你也可以根据以下代码，搭建你自己的测试环境。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、读取配置文件</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、初始化mybatis，创建SqlSessionFactory类实例</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建Session实例</span>        SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BArticle o <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.vvf.practice.blog.dal.mapper.BArticleMapper.selectByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BArticleMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BArticleMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BArticle bArticle <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bArticle<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/blog?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/vvf/practice/blog/dal/mapper/BArticleMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>OK~环境准备完毕，让我们正式开始吧。<br>首先阅读源码要有一个大纲，在把握整体流程后再去看具体实现。 </p><p>读者可以在脑海中定义两个维度，我们从这两个维度交叉去理解源码。一个是从功能角度，mybatis到底要做什么（单向ORM：从关系映射到对象），这其中是怎么实现的？配置类如何生效？接口和xml怎么对应起来，如何执行语句？</p><p>笔者大致把mybatis分为几步：</p><ol><li>读取配置类；</li><li>关联mapper；</li><li>执行操作。</li></ol><p>第二是从代码角度，有几个核心类需要特别关注：</p><ol><li>Configuration：<br>MyBatis所有的配置信息都维持在Configuration对象之中。</li><li>SqlSession：<br>作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能。</li><li>Executor：<br>MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护。</li></ol><p>以下就这几个步骤展开描述。</p><h4 id="读取mybatis-config-xml到configuration"><a href="#读取mybatis-config-xml到configuration" class="headerlink" title="读取mybatis-config.xml到configuration"></a>读取mybatis-config.xml到configuration</h4><p>对生成sqlSessionFactory的语句打断点：SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);<br>点进一层层嵌套的build方法后，看到以下方法：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> SqlSessionFactory <span class="token function">build</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">,</span> String environment<span class="token punctuation">,</span> Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSessionFactory var5<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            XMLConfigBuilder parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var14<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> var14<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注意到有个parse方法，这个方法内部获取了<configuration>标签的内容。</configuration></p><p>this.parseConfiguration(this.parser.evalNode(“/configuration”));</p><p>parseConfiguration方法内对其他标签进行了解析。注意this.mapperElement(root.evalNode(“mappers”));这一行，下一节将重点分析这里。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>XNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties settings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> var3<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这些方法中，随便点一个进去，如下：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">propertiesElement</span><span class="token punctuation">(</span>XNode context<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Properties defaults <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String resource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span><span class="token function">getResourceAsProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span><span class="token function">getUrlAsProperties</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Properties vars <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vars <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>vars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到解析出来的值被放进了configuration里，这个类里包罗万象，什么都有。后续需要取什么值都可以从这里取到。</p><p>解析完成后，SqlSessionFactory创建，构造方法里传入了configuration.</p><p>public DefaultSqlSessionFactory(Configuration configuration) {<br>        this.configuration = configuration;<br>    }</p><p> 同时，值得注意org.apache.ibatis.session.SqlSessionFactoryBuilder类里有大量重载的build方法，都返回SqlSessionFactory创建实例。这里用到了建造者设计模式。</p><h4 id="关联接口和xml，生成SqlSession"><a href="#关联接口和xml，生成SqlSession" class="headerlink" title="关联接口和xml，生成SqlSession"></a>关联接口和xml，生成SqlSession</h4><p>上文提到this.mapperElement(root.evalNode(“mappers”));这个方法，这个方法很重要，因为它关联了mapper接口和xml.<br>如图，首先获取到xml，然后调用mapperParser.parse();方法进行xml的解析。这里有个this.bindMapperForNamespace();方法，在其内部根据命名空间绑定了xml和接口，用到了JDK动态代理的内容（public <t> void addMapper(Class<t> type)这个方法里）。这个在后面单独找篇来写。<br>此处我们先关注xml的方法是怎么添加到configuration里的。<br><img src="https://i.loli.net/2020/09/29/SsAfiwrDPjMudKm.jpg" alt="img"></t></t></p><p><img src="https://i.loli.net/2020/09/29/UlwEFkK9Shdaefg.jpg" alt="img"><br>这个方法很深，不要急，慢慢看。到这里就有点眉目了。<br><img src="https://i.loli.net/2020/09/29/2TnzdBraSVIgMYv.jpg" alt="img"><br>下一步，我们熟悉的参数全都出现了。<br><img src="https://i.loli.net/2020/09/29/PoDqWZdQnL6jJUu.jpg" alt="img"><br>再其后MappedStatement被放进configuration里，后续取用直接从这里拿就好了。 </p><p>this.configuration.addMappedStatement(statement);</p><p>继续，我们来看看怎么生成sqlSession对象。这个其实很简单，就是把configuration里的配置读取了，new了一个DefaultSqlSession.</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> SqlSession <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>ExecutorType execType<span class="token punctuation">,</span> TransactionIsolationLevel level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Transaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>        DefaultSqlSession var8<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Environment environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TransactionFactory transactionFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Executor executor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>            var8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var12<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> var12<span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> var8<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>获取到sqlSession对象后，可以调用方法进行数据库操作，CRUD方法都封装在SqlSession里。这里我们以查询为例，看看selectOne方法。<br>这个方法主要有如下两行：<br>MappedStatement ms = this.configuration.getMappedStatement(statement); </p><p>var5 = this.executor.query(ms, this.wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</p><p>第一行就是去配置类中读取上文写入的MappedStatement.第二行执行操作，这个我们后面马上讲到。</p><h4 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h4><p>整个执行过程，最主要的就是如下三句话：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        BoundSql boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        CacheKey key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>第一行就是通过MappedStatement还有查询参数来生成BoundSql。BoundSql就是对sql的包装，包含sql语句，参数，List(参数的mapping)。这个生成的过程很复杂，包括占位符的替换等等。<br>第二行是生成一级缓存的key.增删改方法都会更新缓存，查询方法会先去查询缓存，查不到再去查数据库。这个逻辑在第三行方法里。<br>第三行执行查询的过程。代码包得很深深深马里亚纳海沟那么深，核心代码如下：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        List var10<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection connection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>            var10 <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> var10<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其实主要就是生成并执行了Statement，具体细节自认功力不够，看得我眼花缭乱呜呜。等我再历练历练回来补全。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，第一章结束啦。其实刚刚在读源码时有个问题，既然mybatis提供了一级缓存且默认开启，那为什么我们的业务中还需要redis呢？原来是因为spring中每条sql的执行都会隐式提交事务。<br>这样sqlSession每次都是新建的，缓存自然也不起作用啦。具体内容可以参考这篇博文哦：<a href="https://blog.csdn.net/ex_tang/article/details/83155031" target="_blank" rel="noopener">https://blog.csdn.net/ex_tang/article/details/83155031</a><br>勘误：上面这篇文章似乎还是不太对。我对select开启了事务，然后在两次查询间手动修改数据库，查询结果不一样。于是我去看了代码，发现直接调用mapper接口，会走到org.mybatis.spring.SqlSessionTemplate装饰类里。<br>这个类在finally里关闭了sqlSession.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SqlSessionUtils<span class="token punctuation">.</span><span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>综上，事务commit确实会导致sqlSession的关闭，但是spring集成mybatis缓存失效的原因却是这段代码中的原因。如果以自己创建sqlSession的方式查询，一级缓存是生效的，类似如下：</p><pre class=" language-java"><code class="language-java">    SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BArticle o <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.vvf.practice.blog.dal.mapper.BArticleMapper.selectByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BArticle o1 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.vvf.practice.blog.dal.mapper.BArticleMapper.selectByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BArticleMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BArticleMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BArticle o3 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这三个对象中间，不论实际数据有什么变化，查询结果都和最开始的一样。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 练习项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解校验</title>
      <link href="2020/08/27/constraint_validator/"/>
      <url>2020/08/27/constraint_validator/</url>
      
        <content type="html"><![CDATA[<p>一个不值钱的小demo。</p><ol><li>首先需要个实体类，需要个注解</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>constraint_validator<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pojo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@IsYS</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>然后定义这个注解，并且给它指定校验方案。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>constraint_validator<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Constraint<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Payload<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义注解逻辑处理类由于实现了ConstraintValidator接口，所以它默认被spring管理成bean, * 所以可以在这个逻辑处理类里面用@Autowiredu或者@Resources注入别的服务，而且不用在类上面用@Compent注解成spring的bean. * * 在spring的使用过程中，有一些现成的注解可以使用。 * @AssertFalse 该值必须为False * @AssertTrue 该值必须为True * @DecimalMax(value，inclusive) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 ，inclusive表示是否包含该值 * @DecimalMin(value，inclusive) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 ，inclusive表示是否包含该值 * @Digits 限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction * @Email 该值必须为邮箱格式 * @Future 被注释的元素必须是一个将来的日期 *@FutureOrPresent 被注释的元素必须是一个现在或将来的日期 * @Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 * @Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 * @Negative 该值必须小于0 * @NegativeOrZero 该值必须小于等于0 * @NotBlank 该值不为空字符串，例如“ ” * @NotEmpty 该值不为空字符串 * @NotNull 该值不为Null * @Null 该值必须为Null * @Past 被注释的元素必须是一个过去的日期 * @PastOrPresent 被注释的元素必须是一个过去或现在的日期 * @Pattern(regexp) 匹配正则 * @Positive 该值必须大于0 * @PositiveOrZero 该值必须大于等于0 * @Size(min,max) 数组大小必须在[min, max]这个区间 * * 有时候根据项目的拓展这些验证注解不够用，就需要自定义验证注解. * @Target 标记了可以使用注解的位置 * @Retention 指定了注解的生命周期 * @Documented 标记了可以被文档化 * @Constraint 表示校验此注解的校验器类 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>        validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>IsYSValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//引进校验器</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">IsYS</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认不能为空</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"对YS描述错误"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//校验不通过输出信息</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>constraint_validator<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintValidatorContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IsYSValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>IsYS<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>IsYS isYS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        required <span class="token operator">=</span> isYS<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> ConstraintValidatorContext constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ValidatorUtil<span class="token punctuation">.</span><span class="token function">isYS</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ValidatorUtil<span class="token punctuation">.</span><span class="token function">isYS</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>constraint_validator<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//匹配 YS是个xxxxx的小猪</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Pattern mobile_pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(YS是只)(.*?)(的小猪)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isYS</span><span class="token punctuation">(</span>String src<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Matcher m <span class="token operator">=</span> mobile_pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.可以测试啦</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>constraint_validator<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Valid<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>TestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/validator"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">doLogin</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> <span class="token annotation punctuation">@Valid</span> Pojo pojo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"输入正确"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><p><img src="https://i.loli.net/2020/08/27/oTOsDY7vIf1p5CK.jpg" alt="https://i.loli.net/2020/08/27/oTOsDY7vIf1p5CK.jpg"></p><p><img src="https://i.loli.net/2020/08/27/TM4Pbk2rUBfdNz1.jpg" alt="https://i.loli.net/2020/08/27/TM4Pbk2rUBfdNz1.jpg"></p><p><img src="https://i.loli.net/2020/08/27/mLTZngaxFH2ozv4.jpg" alt="https://i.loli.net/2020/08/27/mLTZngaxFH2ozv4.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看似简单但容易忽视的编程常识</title>
      <link href="2020/08/13/recommand/"/>
      <url>2020/08/13/recommand/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/peke/p/8818486.html" target="_blank" rel="noopener">https://www.cnblogs.com/peke/p/8818486.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 流式编程</title>
      <link href="2020/08/12/java8stream/"/>
      <url>2020/08/12/java8stream/</url>
      
        <content type="html"><![CDATA[<h1 id="1-类型推断"><a href="#1-类型推断" class="headerlink" title="1. 类型推断"></a>1. 类型推断</h1><p>什么是类型推断？从一个简单的例子来说明。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以上int number显示地声明了参数的类型，这使代码上看起来不够清爽。类型推断，就是指省略这些显而易见的内容，把类型推断交给编译器。改进后的内容如下：</p><pre class=" language-java"><code class="language-java">IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>number <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就是这么个意思，名称比类型更为重要。更多信息参考：<a href="http://www.imooc.com/article/details/id/22660%EF%BC%88%E7%84%B6%E8%80%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%9B%B4%E7%BB%86%E4%BA%86%E8%A7%A3%E7%9A%84%E5%BF%85%E8%A6%81%E3%80%82%EF%BC%89" target="_blank" rel="noopener">http://www.imooc.com/article/details/id/22660（然而并没有更细了解的必要。）</a></p><h1 id="2-流的创建"><a href="#2-流的创建" class="headerlink" title="2. 流的创建"></a>2. 流的创建</h1><h2 id="2-1-Collection-stream-Collection-parallelStream"><a href="#2-1-Collection-stream-Collection-parallelStream" class="headerlink" title="2.1 Collection.stream(),Collection.parallelStream()"></a>2.1 Collection.stream(),Collection.parallelStream()</h2><p>可以顺便看一下流的迭代方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">long</span> count <span class="token operator">=</span> 100_00000<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Long<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//=========传统方式进行外部迭代=========</span>Instant begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传统方式进行外部迭代"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=========java8内部迭代，用lambda处理=========</span>begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部迭代forEach"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=========java8进行并行流处理后迭代（备注：并行流输出是没有顺序的 比如不再是1234顺序了）=========</span>begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部迭代parallelStream"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更多细节参考链接：<a href="https://blog.csdn.net/f641385712/article/details/81514334" target="_blank" rel="noopener">https://blog.csdn.net/f641385712/article/details/81514334</a> </p><h2 id="2-2-Arrays-stream-数组"><a href="#2-2-Arrays-stream-数组" class="headerlink" title="2.2 Arrays.stream(数组)"></a>2.2 Arrays.stream(数组)</h2><pre><code> Employee[] emps = new Employee[10]; Stream&lt;Employee&gt; stream2 = Arrays.stream(emps);</code></pre><h2 id="2-3-Stream-of"><a href="#2-3-Stream-of" class="headerlink" title="2.3 Stream.of"></a>2.3 Stream.of</h2><pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-4-无限流"><a href="#2-4-无限流" class="headerlink" title="2.4 无限流"></a>2.4 无限流</h2><pre><code>        //通过迭代创建无限流        Stream&lt;Integer&gt; stream4 = Stream.iterate(0, (x) -&gt; x + 2);        //中间操作和终止操作        stream4.limit(10).forEach(System.out::println);</code></pre><pre><code>Stream.generate(() -&gt; Math.random())        .limit(5)        .forEach(System.out::println);</code></pre><h1 id="3-筛选与切片"><a href="#3-筛选与切片" class="headerlink" title="3. 筛选与切片"></a>3. 筛选与切片</h1><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5022</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50554</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只选前两个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="4-惰性求值和及早求值"><a href="#4-惰性求值和及早求值" class="headerlink" title="4. 惰性求值和及早求值"></a>4. 惰性求值和及早求值</h1><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根本不会执行</span><span class="token comment" spellcheck="true">//实际下面的一段代码是没有任何输出的；</span><span class="token comment" spellcheck="true">//而原因则是filter只刻画了stream，但是并没有产生新的集合，而像这种没有实际功能，只是描述stream的操作，就叫做惰性求值；</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在filter后加上方法，比如count()，则会执行print语句，代码如下：</span><span class="token comment" spellcheck="true">//这种操作则是及早求值。</span><span class="token comment" spellcheck="true">//想要判断是惰性求值与及早求值的方法也很简单，只要看返回值就好，如果是stream则是惰性求值，而如果是另一个值或是空值则是及早求值。</span><span class="token comment" spellcheck="true">//整个过程也和建造者模式有共通之处，建造者模式使用一系列操作设置属性和配置，最后使用build方法，这时对象才会被创建。</span><span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="5-map和flatMap"><a href="#5-map和flatMap" class="headerlink" title="5. map和flatMap"></a>5. map和flatMap</h1><pre class=" language-java"><code class="language-java">       <span class="token comment" spellcheck="true">//-------------------------------------例1-----------------------------------------</span>        <span class="token comment" spellcheck="true">//* map(Function f) 接收Lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，</span><span class="token comment" spellcheck="true">//                                      该参数会被应用到每个元素上，并将其映射成一个新的元素。</span>        <span class="token comment" spellcheck="true">//* mapToDouble(ToDoubleFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</span>        <span class="token comment" spellcheck="true">//* mapToInt(ToIntFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</span>        <span class="token comment" spellcheck="true">//* mapToLong(ToLongFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</span>        <span class="token comment" spellcheck="true">//* flatMap(Function f) 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span>e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            List list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> x <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//----------------------------------例2--------------------------------------</span>        <span class="token comment" spellcheck="true">//todo 我没搞懂为什么是字符串却输出地址</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//    使用flatMap方法的效果是，各个数组并不是分别映射一个流，而是映射成流的内容，</span>        <span class="token comment" spellcheck="true">//    所有使用flatMap(Array::stream)时生成的单个流被合并起来，即扁平化为一个流。</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分云里雾里的确实没看懂，我在等大佬看懂了给我讲，然而大佬是男人，男人都是骗子，所以……还是先看运行结果：</p><blockquote><p>ZHANGSAN<br>LISI<br>WANGWU<br>ZHAOLIU<br>z<br>h<br>a<br>n<br>g<br>s<br>a<br>n<br>l<br>i<br>s<br>i<br>w<br>a<br>n<br>g<br>w<br>u<br>z<br>h<br>a<br>o<br>l<br>i<br>u<br>[Ljava.lang.String;@37bba400</p><h2 id="Ljava-lang-String-179d3b25"><a href="#Ljava-lang-String-179d3b25" class="headerlink" title="[Ljava.lang.String;@179d3b25"></a>[Ljava.lang.String;@179d3b25</h2><p>HeloWrd<br>Process finished with exit code 0</p></blockquote><p>这里明白啦，其实还是map和flatMap的区别。map是映射到新元素后形成多个流，所以上面输出的其实是字符串数组的地址，而flatMap是映射为同一个流。然后接着又发现了一个问题，就是如下这段代码的输出不一样：</p><pre class=" language-java"><code class="language-java"> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>  Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个还是大佬解答了，小草好感动，贴上大佬的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java8stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">.</span>toList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author bys * @date 2020/8/17 11:00 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamByGXYSZ</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// distinct() 有状态的中间操作，元素的处理受到前面元素的影响</span>        <span class="token comment" spellcheck="true">// 流里面是数组，使用distinct会对 数组地址 进行去重，地址不同不会去重</span>        Stream<span class="token operator">&lt;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> stream <span class="token operator">=</span> Arrays                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// HelloHelloWorld</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 流里面是字符串，使用distinct会对字符串进行对比去重，只剩下一个Hello</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> Arrays                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream1                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// HelloWorld</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 流里面是字符串，flatMap对所有流进行合并形成一个整合流，存一个字符串 HelloHelloWorld，再去重相当于String字符串去重</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream2                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// HeloWrd</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="6-排序"><a href="#6-排序" class="headerlink" title="6.排序"></a>6.排序</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Stream&lt;T> sorted();产生一个新的流，按照默认顺序排序</span><span class="token comment" spellcheck="true">//Stream&lt;T> sorted(Comparator&lt;? super T> comparator);产生一个新流，其中按比较器顺序排序</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> emps <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">6666.66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">9999.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">3333.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六1"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"田七"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5555.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="7-串行流和并行流"><a href="#7-串行流和并行流" class="headerlink" title="7.串行流和并行流"></a>7.串行流和并行流</h1><p>参考链接：<a href="https://blog.csdn.net/qq_25112523/article/details/107086727?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/qq_25112523/article/details/107086727?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param</a> </p><h2 id="7-1-串行流stream"><a href="#7-1-串行流stream" class="headerlink" title="7.1 串行流stream"></a>7.1 串行流stream</h2><p>其实在前面已经介绍了很多串行流的方法了，这里简单做一个总结。</p><p>stream的获取方式：</p><h6 id="获取串行流的两种方式："><a href="#获取串行流的两种方式：" class="headerlink" title="获取串行流的两种方式："></a>获取串行流的两种方式：</h6><ul><li>所有的 Collection 集合都可以通过 stream 默认方法获取流：<code>list.stream();</code></li><li>Stream 接口的静态方法 of 可以获取数组对应的流：<code>Stream.of(6,1,5,4,3);</code></li></ul><h6 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h6><p><img src="https://img-blog.csdnimg.cn/20200702162233755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MTEyNTIz,size_16,color_FFFFFF,t_70" alt="img"> </p><h6 id="Stream注意事项-重要"><a href="#Stream注意事项-重要" class="headerlink" title="Stream注意事项(重要)"></a>Stream注意事项(重要)</h6><ol><li>Stream只能操作一次</li><li>Stream方法返回的是新的流</li><li>Stream不调用终结方法，中间的操作不会执行</li></ol><h2 id="7-2-并行流parallelStream"><a href="#7-2-并行流parallelStream" class="headerlink" title="7.2 并行流parallelStream"></a>7.2 并行流parallelStream</h2><h6 id="获取并行流的两种方式："><a href="#获取并行流的两种方式：" class="headerlink" title="获取并行流的两种方式："></a>获取并行流的两种方式：</h6><ul><li>直接获取并行的流：</li><li>将串行流转成并行流：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接获取并行的流</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将串行流转成并行流</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="解决并行流的线程安全问题："><a href="#解决并行流的线程安全问题：" class="headerlink" title="解决并行流的线程安全问题："></a>解决并行流的线程安全问题：</h6><p>多线程下，使用并行流会有线程安全的问题（这里指的是不会按顺序执行，即是多个争先抢后的执行）</p><p>根据需要进行不同的处理：</p><ul><li>使用同步代码块 <code>synchronized</code> （比如使用forEach循环处理时）</li><li>使用线程安全的集合 <code>Vector、Collections.synchronizedList(list)</code></li><li>调用Stream流的 <code>collect/toArray</code> 方法</li></ul><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ol><li>parallelStream是线程不安全的</li><li>parallelStream适用的场景是CPU密集型的，只是做到别浪费CPU，假如本身电脑CPU的负载很大，那还到处用并行流，那并不能起到作用</li><li>I/O密集型 磁盘I/O、网络I/O都属于I/O操作，这部分操作是较少消耗CPU资源，一般并行流中不适用于I/O密集型的操作，就比如使用并流行进行大批量的消息推送，涉及到了大量I/O，使用并行流反而慢了很多</li><li>在使用并行流的时候是无法保证元素的顺序的，也就是即使你用了同步集合也只能保证元素都正确但无法保证其中的顺序</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP记录操作日志（前端传日志参数）</title>
      <link href="2020/08/11/aop_log_threadLocal/"/>
      <url>2020/08/11/aop_log_threadLocal/</url>
      
        <content type="html"><![CDATA[<p>一个AOP记日志的小demo,参考了大佬师父的代码（师父好厉害<del>~</del>）。主要参数前端传递，方法里加个注解就好了。如果是新增的方法，需要返回新增后记录的主键。代码地址：<a href="https://github.com/VVFloyd/logging-with-AOP/tree/dev" target="_blank" rel="noopener">https://github.com/VVFloyd/logging-with-AOP/tree/dev</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与Quill相爱相杀</title>
      <link href="2020/08/05/quill/"/>
      <url>2020/08/05/quill/</url>
      
        <content type="html"><![CDATA[<h1 id="1-需求："><a href="#1-需求：" class="headerlink" title="1. 需求："></a>1. 需求：</h1><p>管理后台需要一个编辑器对文本内容编辑，内容保存为html，需要兼容支付宝小程序的富文本插件。</p><h1 id="2-主要问题："><a href="#2-主要问题：" class="headerlink" title="2. 主要问题："></a>2. 主要问题：</h1><ol><li>quill编辑的样式都是以class的形式保存。小程序无法还原这类样式。解决方法有两个，一是在小程序的富文本编辑器外，引入对应富文本插件的样式；二是重写管理后台富文本的样式，改成style格式的。本次开发采用第二种方法解决。</li><li>富文本的空格和段落展示有缺陷。参考<a href="http://ueditor.baidu.com/website/onlinedemo.html" target="_blank" rel="noopener">http://ueditor.baidu.com/website/onlinedemo.html</a>.测试方法：</li></ol><ul><li>在编辑器输入“<code>111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</code><br>”，然后在第一行中间任意位置键入空格。</li><li>在段首按空格键，每两个空格才生成一次&nbsp;</li></ul><h1 id="3-实现功能："><a href="#3-实现功能：" class="headerlink" title="3. 实现功能："></a>3. 实现功能：</h1><p>针对以上需求和富文本通病，本次开发改进了以下问题，总结解决方法以供日后参考。</p><ol><li>quill自定义字体大小</li><li>quill自定义段落缩进</li><li>小程序空格兼容</li><li>quill对齐方式、字体等其他样式，由class转为style的定义</li><li>quill自定义行间距</li><li>quill图片上传方式更改（默认转为base64,改为OSS方式）</li></ol><h1 id="4-具体实现："><a href="#4-具体实现：" class="headerlink" title="4.具体实现："></a>4.具体实现：</h1><h2 id="4-1-引入插件"><a href="#4-1-引入插件" class="headerlink" title="4.1 引入插件"></a>4.1 引入插件</h2><p>这部分比较简单，安装依赖后可快速搭建。参考链接：</p><ol><li>中文文档：<a href="http://kang-bing-kui.gitbook.io/quill/" target="_blank" rel="noopener">http://kang-bing-kui.gitbook.io/quill/</a></li><li>详细步骤：<a href="https://www.jianshu.com/p/a6cba69d6e49" target="_blank" rel="noopener">https://www.jianshu.com/p/a6cba69d6e49</a></li></ol><p>本次实现变量名称（仅供本文阅读方便）：</p><quill-editor v-model="form.text" :options="quillOption" ref="text" class="ql-editor"><h2 id="4-2-自定义工具栏"><a href="#4-2-自定义工具栏" class="headerlink" title="4.2 自定义工具栏"></a>4.2 自定义工具栏</h2><h4 id="1-在data中定义"><a href="#1-在data中定义" class="headerlink" title="1.在data中定义"></a>1.在data中定义</h4><p>quillOption: quillConfig,</p><h4 id="2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）"><a href="#2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）" class="headerlink" title="2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）"></a>2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）</h4><p>import quillConfig from “../quill-config.vue”;</p><h4 id="3-在quillConfig中引入quill官方的样式"><a href="#3-在quillConfig中引入quill官方的样式" class="headerlink" title="3.在quillConfig中引入quill官方的样式"></a>3.在quillConfig中引入quill官方的样式</h4><p>import “quill/dist/quill.core.css”;</p><p>import “quill/dist/quill.snow.css”;</p><p>import “quill/dist/quill.bubble.css”;</p><h4 id="4-引入quill和Parchment"><a href="#4-引入quill和Parchment" class="headerlink" title="4.引入quill和Parchment"></a>4.引入quill和Parchment</h4><p>import Quill from “quill”;</p><p>var Parchment = Quill.<em>import</em>(“parchment”);</p><p>什么是parchment？参考文档：<a href="https://segmentfault.com/a/1190000019114222?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019114222?utm_source=tag-newest</a></p><p>不理解也没关系，不影响后续自定义。</p><h4 id="5-改变对齐方式和字体的样式格式"><a href="#5-改变对齐方式和字体的样式格式" class="headerlink" title="5.改变对齐方式和字体的样式格式"></a>5.改变对齐方式和字体的样式格式</h4><p>在官方文档中，我们可以看到quill提供了不同的样式选择。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614717371-a54662a2-94fa-4c22-8164-b51ce7e831e8.png" alt="image.png"></p><p>当我们注册class时，最后生成的html中，样式会以ql-开头的样式显示，如果注册style，会生成行内样式。</p><p>代码实现起来其实很简单。首先去node_modules里找到quill.点开如下文件夹：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614944473-9dd9a6a0-028c-49da-acc6-76054541ad0a.png" alt="image.png"></p><p>在其中寻找你需要改变的样式，以align举例。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615061513-37b477fa-6827-46f4-9c2e-94c7089e8adc.png" alt="image.png"></p><p>查看它的源码，会发现它已经定义好了两种格式：class和style.编辑器默认注册的是class，这是生成的代码中，会包含ql-align-right、al-align-center等class。如果把它改为style的注册方式，生成的代码会变成style=” text-align: right;”的形式，后者才可以被小程序识别。</p><p>明白了原理，代码就很简单了。</p><pre><code>var Align = Quill.import("attributors/style/align");Align.whitelist = ["right", "center", "justify"];//这行不写也OKQuill.register(Align, true);</code></pre><p>类似的，字体也可以按这种方式进行更改。</p><h4 id="6-改变缩进"><a href="#6-改变缩进" class="headerlink" title="6.改变缩进"></a>6.改变缩进</h4><p>虽然明白了这种改变方式，但是当我们想如法炮制改变缩进功能时，却发现源码没有提供style样式。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615601801-a1560235-517b-4ae5-99e1-92547599c38f.png" alt="image.png"></p><pre class=" language-vue"><code class="language-vue">import Parchment from 'parchment';class IdentAttributor extends Parchment.Attributor.Class {  add(node, value) {    if (value === '+1' || value === '-1') {      let indent = this.value(node) || 0;      value = (value === '+1' ? (indent + 1) : (indent - 1));    }    if (value === 0) {      this.remove(node);      return true;    } else {      return super.add(node, value);    }  }  canAdd(node, value) {    return super.canAdd(node, value) || super.canAdd(node, parseInt(value));  }  value(node) {    return parseInt(super.value(node)) || undefined;  // Don't return NaN  }}let IndentClass = new IdentAttributor('indent', 'ql-indent', {  scope: Parchment.Scope.BLOCK,  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]});export { IndentClass };</code></pre><p>你问我怎么办，我也不知道除了自己写，还能怎么办(′д｀ )…彡…彡</p><pre><code>const pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];const TAB_MULTIPLIER = 30;export class IndentAttributor extends Parchment.Attributor.Style {  add(node, value) {​```return super.add(node, ${+value * TAB_MULTIPLIER}px);  }​```  value(node) {​```return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined;​```  }}export const IndentStyle = new IndentAttributor("indent", "margin-left", {  scope: Parchment.Scope.BLOCK,    whitelist: pixelLevels.map(value =&gt; ${value * TAB_MULTIPLIER}px)});Quill.register({ "formats/indent": IndentStyle }, true);</code></pre><p>上面这段代码，其实就是仿照源码，自定义一个样式，然后进行注册。每次向左或向右偏移30个像素。</p><h4 id="7-自定义字体大小"><a href="#7-自定义字体大小" class="headerlink" title="7.自定义字体大小"></a>7.自定义字体大小</h4><p>默认样式中，quill只提供了三个大小，并且是以class的方式实现的。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596616366042-869a3a3a-cd21-4640-b963-a712ec4de5bd.png" alt="image.png"></p><p>这样的功能略显潦草，即使换成style的样式也觉得不够用。于是自己定义。首先你需要写个css.</p><pre><code>size-set.css.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='10px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='10px']::before {    content: '10px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='12px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='12px']::before {    content: '12px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='14px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='14px']::before {    content: '14px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='16px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='16px']::before {    content: '16px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='18px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='18px']::before {    content: '18px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='20px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='20px']::before {    content: '20px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='22px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='22px']::before {    content: '22px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='24px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='24px']::before {    content: '24px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='26px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='26px']::before {    content: '26px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='28px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='28px']::before {    content: '28px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='30px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='30px']::before {    content: '30px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='32px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='32px']::before {    content: '32px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='36px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='36px']::before {    content: '36px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='38px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='38px']::before {    content: '38px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='40px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='40px']::before {    content: '40px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='45px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='45px']::before {    content: '45px';}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='50px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='50px']::before {    content: '50px';}/**设置默认字体显示**/.ql-container {    font-size:16px;}</code></pre><p>然后在&lt; style&gt;标签中引入这个样式文件。</p><p>@import “./size-set.css”;</p><p>之后就可以愉快的注册啦。</p><pre><code>fontSizeStyle.whitelist = [  "10px",  "12px",  "14px",  "16px",  "18px",  "20px",  "22px",  "24px",  "26px",  "28px",  "30px",  "32px",  "36px",  "38px",  "40px",  "45px",  "50px",  false];Quill.register(fontSizeStyle, true);</code></pre><p>8.自定义行间距</p><p>对于有的功能，我们直接进行覆写，对于没有的功能，需要自定义新的按钮。</p><p>想要实现行间距，首先还是需要写个css（悄咪咪吐槽，语雀这个编辑器也不好用啊，代码看起来好乱Σ(っ °Д °;)っ）。</p><pre><code>lineHeight.css.ql-snow .ql-picker.ql-lineheight {    width: 58px;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.0"]::before {    content: "1.0";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.0"]::before {    content: "1.0" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.2"]::before {    content: "1.2";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.2"]::before {    content: "1.2" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.5"]::before {    content: "1.5";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.5"]::before {    content: "1.5" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.6"]::before {    content: "1.6";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.6"]::before {    content: "1.6" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.8"]::before {    content: "1.8";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.8"]::before {    content: "1.8" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.0"]::before {    content: "2.0";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.0"]::before {    content: "2.0" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.4"]::before {    content: "2.4";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.4"]::before {    content: "2.4" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.8"]::before {    content: "2.8";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.8"]::before {    content: "2.8" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="3.0"]::before {    content: "3.0";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="3.0"]::before {    content: "3.0" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="4.0"]::before {    content: "4.0";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="4.0"]::before {    content: "4.0" !important;}.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="5.0"]::before {    content: "5.0";}.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="5.0"]::before {    content: "5.0" !important;}</code></pre><p>同样，需要引入样式</p><p>@import “./lineHeight.css”;</p><p>这里有个小问题，就是这个样式，在回显的时候会被插件本身的样式覆盖，想了很久也不知道怎么办。于是想到了个很暴力的方法，放到app.js里。期待能有前端的同学提供更好的解决方案。作为后台的同学，开发前端时毕竟还是以需求为导向，没有更多精力研究前端的原理≡(▔﹏▔)≡。</p><p>最后同样，注册就完事儿~</p><pre><code>var lineHeightConfig = {  scope: Parchment.Scope.INLINE,  whitelist: [    "1.0",    "1.2",    "1.5",    "1.6",    "1.8",    "2.0",    "2.4",    "2.8",    "3.0",    "4.0",    "5.0"  ]};var lineHeightClass = new Parchment.Attributor.Class(  "lineheight",  "ql-line-height",  lineHeightConfig);var lineHeightStyle = new Parchment.Attributor.Style(  "lineheight",  "line-height",  lineHeightConfig);Parchment.register(lineHeightClass);Parchment.register(lineHeightStyle);</code></pre><h4 id="8-空格失效的解决方法"><a href="#8-空格失效的解决方法" class="headerlink" title="8.空格失效的解决方法"></a>8.空格失效的解决方法</h4><p>在联调的过程中发现了一个很尴尬的问题，在后台编辑的文章里，如果输入很多空格，最后在小程序里只显示一个。后来把空格替换成&nbsp;也没有用。后来搜到空格其实有很多种，参考文档：<a href="http://www.oicqzone.com/pc/2015083122336.html" target="_blank" rel="noopener">http://www.oicqzone.com/pc/2015083122336.html</a></p><p>经过测试后，发现全角空格可以正常显示，也符合中文输入的习惯，于是对html中所有标签外的空格进行替换。</p><p>this.form.text.replace(/(?&lt;=&gt;[^&lt;]*?) /g, “ ”)</p><h4 id="9-图片上传方式更改"><a href="#9-图片上传方式更改" class="headerlink" title="9.图片上传方式更改"></a>9.图片上传方式更改</h4><p>这个网上资料很多，我直接贴代码了。</p><p>这里的lineheight是文本高亮，需要安装依赖，然后引入import <strong>hljs</strong> from “highlight.js”; 辅助功能不用也OK~</p><pre><code>/*富文本编辑图片上传配置*/const uploadConfig = {  action: "啦啦啦啦啦啦", // 必填参数 图片上传地址  methods: "POST", // 必填参数 图片上传方式  token: "", // 可选参数 如果需要token验证，假设你的token有存放在sessionStorage  name: "file", // 必填参数 文件的参数名  size: 500, // 可选参数   图片大小，单位为Kb, 1M = 1024Kb  accept: "image/png, image/gif, image/jpeg, image/bmp, image/x-icon" // 可选 可上传的图片格式};const handlers = {lineheight: function(e) {//添加工具方法let Range = this.quill.getSelection();this.quill.formatText(Range.index, Range.length, "lineheight", e);},image: function image() {var self = this;var fileInput = this.container.querySelector("input.ql-image[type=file]");if (fileInput === null) {  fileInput = document.createElement("input");  fileInput.setAttribute("type", "file");  // 设置图片参数名  if (uploadConfig.name) {    fileInput.setAttribute("name", uploadConfig.name);  }  // 可设置上传图片的格式  fileInput.setAttribute("accept", uploadConfig.accept);  fileInput.classList.add("ql-image");  // 监听选择文件  fileInput.addEventListener("change", function() {    // 创建formData    var formData = new FormData();    formData.append(uploadConfig.name, fileInput.files[0]);    formData.append("object", "product");    // 如果需要token且存在token    if (uploadConfig.token) {      formData.append("token", uploadConfig.token);    }    // 图片上传    var xhr = new XMLHttpRequest();    xhr.open(uploadConfig.methods, uploadConfig.action, true);    // 上传数据成功，会触发    xhr.onload = function() {      if (xhr.status === 200) {        var res = JSON.parse(xhr.responseText);        let length = self.quill.getSelection(true).index;        //这里很重要，你图片上传成功后，img的src需要在这里添加，res.path就是你服务器返回的图片链接。        self.quill.insertEmbed(length, "image", res.data.src);        self.quill.setSelection(length + 1);      }      fileInput.value = "";    };    // 开始上传数据    xhr.upload.onloadstart = function() {      fileInput.value = "";    };    // 当发生网络异常的时候会触发，如果上传数据的过程还未结束    xhr.upload.onerror = function() {};    // 上传数据完成（成功或者失败）时会触发    xhr.upload.onloadend = function() {      // console.log('上传结束')    };    xhr.send(formData);  });  this.container.appendChild(fileInput);}fileInput.click();}};export default {placeholder: "",theme: "snow", // 主题modules: {toolbar: {container: toolOptions, // 工具栏选项handlers: handlers // 事件重写},syntax: {highlight: text =&gt; hljs.highlightAuto(text).value}}};</code></pre><p>在引用quill的html上，也要加上以下这段内容</p><p><el-upload class="avatar-uploader" action="你的OSS接口" name="file" :show-file-list="false" :on-success="uploadSuccessEdit" :on-error="uploadErrorEdit" :before-upload="beforeUploadEdit" style="line-height: 0px"></el-upload></p><h4 id="10-定义工具栏"><a href="#10-定义工具栏" class="headerlink" title="10.定义工具栏"></a>10.定义工具栏</h4><p>上面所有的内容，最后都要在工具栏定义，不然工具栏始终是默认的样子。</p><pre><code>const toolOptions = [["bold", "italic", "underline", "strike"],  ["blockquote", "code-block"],  [{ header: 1 }, { header: 2 }],  [{ list: "ordered" }, { list: "bullet" }],  [{ script: "sub" }, { script: "super" }], [{ indent: "-1" }, { indent: "+1" }],  [{ direction: "rtl" }],  // [{ size: ["small", false, "large", "huge"] }],  [{ size: fontSizeStyle.whitelist }],  [{ header: [1, 2, 3, 4, 5, 6, false] }], [{ color: [] }, { background: [] }], [{ font: [] }],  [{ align: [] }],  ["clean"],  ["link", "image"],  [    {      lineheight: [        "1.0",        "1.2",        "1.5",        "1.6",        "1.8",        "2.0",        "2.4",        "2.8",        "3.0",        "4.0",        "5.0"      ]    }  ]];</code></pre><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>至此，所有功能都写完了了（主要是我写累了……），直观一点，圈出来的功能都改了。over~</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596618830036-e4f386ad-ea1b-438a-94fa-b9d1ada89b36.png" alt="image.png"></p></quill-editor><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
            <tag> 前端 </tag>
            
            <tag> VUE </tag>
            
            <tag> element ui </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
