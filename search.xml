<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World喵喵喵┗|｀O′|┛ 嗷~~</title>
      <link href="/2020/08/06/hello-world/"/>
      <url>/2020/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>与Quill相爱相杀</title>
      <link href="/2020/08/05/quill/"/>
      <url>/2020/08/05/quill/</url>
      
        <content type="html"><![CDATA[<h1 id="1-需求："><a href="#1-需求：" class="headerlink" title="1. 需求："></a>1. 需求：</h1><p>管理后台需要一个编辑器对文本内容编辑，内容保存为html，需要兼容支付宝小程序的富文本插件。</p><h1 id="2-主要问题："><a href="#2-主要问题：" class="headerlink" title="2. 主要问题："></a>2. 主要问题：</h1><ol><li>quill编辑的样式都是以class的形式保存。小程序无法还原这类样式。解决方法有两个，一是在小程序的富文本编辑器外，引入对应富文本插件的样式；二是重写管理后台富文本的样式，改成style格式的。本次开发采用第二种方法解决。</li><li>富文本的空格和段落展示有缺陷。参考<a href="http://ueditor.baidu.com/website/onlinedemo.html">http://ueditor.baidu.com/website/onlinedemo.html</a>.测试方法：</li></ol><ul><li>在编辑器输入“111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111”，然后在第一行中间任意位置键入空格。</li><li>在段首按空格键，每两个空格才生成一次&nbsp;</li></ul><h1 id="3-实现功能："><a href="#3-实现功能：" class="headerlink" title="3. 实现功能："></a>3. 实现功能：</h1><p>针对以上需求和富文本通病，本次开发改进了以下问题，总结解决方法以供日后参考。</p><ol><li>quill自定义字体大小</li><li>quill自定义段落缩进</li><li>小程序空格兼容</li><li>quill对齐方式、字体等其他样式，由class转为style的定义</li><li>quill自定义行间距</li><li>quill图片上传方式更改（默认转为base64,改为OSS方式）</li></ol><h1 id="4-具体实现："><a href="#4-具体实现：" class="headerlink" title="4.具体实现："></a>4.具体实现：</h1><h2 id="4-1-引入插件"><a href="#4-1-引入插件" class="headerlink" title="4.1 引入插件"></a>4.1 引入插件</h2><p>这部分比较简单，安装依赖后可快速搭建。参考链接：</p><ol><li>中文文档：<a href="http://kang-bing-kui.gitbook.io/quill/">http://kang-bing-kui.gitbook.io/quill/</a></li><li>详细步骤：<a href="https://www.jianshu.com/p/a6cba69d6e49">https://www.jianshu.com/p/a6cba69d6e49</a></li></ol><p>本次实现变量名称（仅供本文阅读方便）：</p><quill-editor v-model="form.text" :options="quillOption" ref="text" class="ql-editor"><h2 id="4-2-自定义工具栏"><a href="#4-2-自定义工具栏" class="headerlink" title="4.2 自定义工具栏"></a>4.2 自定义工具栏</h2><h4 id="1-在data中定义"><a href="#1-在data中定义" class="headerlink" title="1.在data中定义"></a>1.在data中定义</h4><p>quillOption: quillConfig,</p><h4 id="2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）"><a href="#2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）" class="headerlink" title="2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）"></a>2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）</h4><p>import quillConfig from “../quill-config.vue”;</p><h4 id="3-在quillConfig中引入quill官方的样式"><a href="#3-在quillConfig中引入quill官方的样式" class="headerlink" title="3.在quillConfig中引入quill官方的样式"></a>3.在quillConfig中引入quill官方的样式</h4><p>import “quill/dist/quill.core.css”;</p><p>import “quill/dist/quill.snow.css”;</p><p>import “quill/dist/quill.bubble.css”;</p><h4 id="4-引入quill和Parchment"><a href="#4-引入quill和Parchment" class="headerlink" title="4.引入quill和Parchment"></a>4.引入quill和Parchment</h4><p>import Quill from “quill”;</p><p>var Parchment = Quill.<em>import</em>(“parchment”);</p><p>什么是parchment？参考文档：<a href="https://segmentfault.com/a/1190000019114222?utm_source=tag-newest">https://segmentfault.com/a/1190000019114222?utm_source=tag-newest</a></p><p>不理解也没关系，不影响后续自定义。</p><h4 id="5-改变对齐方式和字体的样式格式"><a href="#5-改变对齐方式和字体的样式格式" class="headerlink" title="5.改变对齐方式和字体的样式格式"></a>5.改变对齐方式和字体的样式格式</h4><p>在官方文档中，我们可以看到quill提供了不同的样式选择。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614717371-a54662a2-94fa-4c22-8164-b51ce7e831e8.png" alt="image.png"></p><p>当我们注册class时，最后生成的html中，样式会以ql-开头的样式显示，如果注册style，会生成行内样式。</p><p>代码实现起来其实很简单。首先去node_modules里找到quill.点开如下文件夹：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614944473-9dd9a6a0-028c-49da-acc6-76054541ad0a.png" alt="image.png"></p><p>在其中寻找你需要改变的样式，以align举例。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615061513-37b477fa-6827-46f4-9c2e-94c7089e8adc.png" alt="image.png"></p><p>查看它的源码，会发现它已经定义好了两种格式：class和style.编辑器默认注册的是class，这是生成的代码中，会包含ql-align-right、al-align-center等class。如果把它改为style的注册方式，生成的代码会变成style=” text-align: right;”的形式，后者才可以被小程序识别。</p><p>明白了原理，代码就很简单了。</p><pre><code>var Align = Quill.import("attributors/style/align");Align.whitelist = ["right", "center", "justify"];//这行不写也OKQuill.register(Align, true);</code></pre><p>类似的，字体也可以按这种方式进行更改。</p><h4 id="6-改变缩进"><a href="#6-改变缩进" class="headerlink" title="6.改变缩进"></a>6.改变缩进</h4><p>虽然明白了这种改变方式，但是当我们想如法炮制改变缩进功能时，却发现源码没有提供style样式。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615601801-a1560235-517b-4ae5-99e1-92547599c38f.png" alt="image.png"></p><pre class=" language-vue"><code class="language-vue">import Parchment from 'parchment';class IdentAttributor extends Parchment.Attributor.Class &#123;  add(node, value) &#123;    if (value === '+1' || value === '-1') &#123;      let indent = this.value(node) || 0;      value = (value === '+1' ? (indent + 1) : (indent - 1));    &#125;    if (value === 0) &#123;      this.remove(node);      return true;    &#125; else &#123;      return super.add(node, value);    &#125;  &#125;  canAdd(node, value) &#123;    return super.canAdd(node, value) || super.canAdd(node, parseInt(value));  &#125;  value(node) &#123;    return parseInt(super.value(node)) || undefined;  // Don't return NaN  &#125;&#125;let IndentClass = new IdentAttributor('indent', 'ql-indent', &#123;  scope: Parchment.Scope.BLOCK,  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]&#125;);export &#123; IndentClass &#125;;</code></pre><p>你问我怎么办，我也不知道除了自己写，还能怎么办(′д｀ )…彡…彡</p><pre><code>const pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];const TAB_MULTIPLIER = 30;export class IndentAttributor extends Parchment.Attributor.Style &amp;#123;  add(node, value) &amp;#123;​```return super.add(node, $&amp;#123;+value * TAB_MULTIPLIER&amp;#125;px);  &amp;#125;​```  value(node) &amp;#123;​```return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined;​```  &amp;#125;&amp;#125;export const IndentStyle = new IndentAttributor("indent", "margin-left", &amp;#123;  scope: Parchment.Scope.BLOCK,    whitelist: pixelLevels.map(value =&gt; $&amp;#123;value * TAB_MULTIPLIER&amp;#125;px)&amp;#125;);Quill.register(&amp;#123; "formats/indent": IndentStyle &amp;#125;, true);</code></pre><p>上面这段代码，其实就是仿照源码，自定义一个样式，然后进行注册。每次向左或向右偏移30个像素。</p><h4 id="7-自定义字体大小"><a href="#7-自定义字体大小" class="headerlink" title="7.自定义字体大小"></a>7.自定义字体大小</h4><p>默认样式中，quill只提供了三个大小，并且是以class的方式实现的。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596616366042-869a3a3a-cd21-4640-b963-a712ec4de5bd.png" alt="image.png"></p><p>这样的功能略显潦草，即使换成style的样式也觉得不够用。于是自己定义。首先你需要写个css.</p><pre><code>size-set.css.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='10px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='10px']::before &amp;#123;    content: '10px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='12px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='12px']::before &amp;#123;    content: '12px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='14px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='14px']::before &amp;#123;    content: '14px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='16px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='16px']::before &amp;#123;    content: '16px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='18px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='18px']::before &amp;#123;    content: '18px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='20px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='20px']::before &amp;#123;    content: '20px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='22px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='22px']::before &amp;#123;    content: '22px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='24px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='24px']::before &amp;#123;    content: '24px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='26px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='26px']::before &amp;#123;    content: '26px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='28px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='28px']::before &amp;#123;    content: '28px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='30px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='30px']::before &amp;#123;    content: '30px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='32px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='32px']::before &amp;#123;    content: '32px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='36px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='36px']::before &amp;#123;    content: '36px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='38px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='38px']::before &amp;#123;    content: '38px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='40px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='40px']::before &amp;#123;    content: '40px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='45px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='45px']::before &amp;#123;    content: '45px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='50px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='50px']::before &amp;#123;    content: '50px';&amp;#125;/**设置默认字体显示**/.ql-container &amp;#123;    font-size:16px;&amp;#125;</code></pre><p>然后在<style>标签中引入这个样式文件。</p><p>@import “./size-set.css”;</p><p>之后就可以愉快的注册啦。</p><pre><code>fontSizeStyle.whitelist = [  &quot;10px&quot;,  &quot;12px&quot;,  &quot;14px&quot;,  &quot;16px&quot;,  &quot;18px&quot;,  &quot;20px&quot;,  &quot;22px&quot;,  &quot;24px&quot;,  &quot;26px&quot;,  &quot;28px&quot;,  &quot;30px&quot;,  &quot;32px&quot;,  &quot;36px&quot;,  &quot;38px&quot;,  &quot;40px&quot;,  &quot;45px&quot;,  &quot;50px&quot;,  false];Quill.register(fontSizeStyle, true);</code></pre><p>8.自定义行间距</p><p>对于有的功能，我们直接进行覆写，对于没有的功能，需要自定义新的按钮。</p><p>想要实现行间距，首先还是需要写个css（悄咪咪吐槽，语雀这个编辑器也不好用啊，代码看起来好乱Σ(っ °Д °;)っ）。</p><pre><code>lineHeight.css.ql-snow .ql-picker.ql-lineheight &amp;#123;    width: 58px;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;1.0&quot;]::before &amp;#123;    content: &quot;1.0&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;1.0&quot;]::before &amp;#123;    content: &quot;1.0&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;1.2&quot;]::before &amp;#123;    content: &quot;1.2&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;1.2&quot;]::before &amp;#123;    content: &quot;1.2&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;1.5&quot;]::before &amp;#123;    content: &quot;1.5&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;1.5&quot;]::before &amp;#123;    content: &quot;1.5&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;1.6&quot;]::before &amp;#123;    content: &quot;1.6&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;1.6&quot;]::before &amp;#123;    content: &quot;1.6&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;1.8&quot;]::before &amp;#123;    content: &quot;1.8&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;1.8&quot;]::before &amp;#123;    content: &quot;1.8&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;2.0&quot;]::before &amp;#123;    content: &quot;2.0&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;2.0&quot;]::before &amp;#123;    content: &quot;2.0&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;2.4&quot;]::before &amp;#123;    content: &quot;2.4&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;2.4&quot;]::before &amp;#123;    content: &quot;2.4&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;2.8&quot;]::before &amp;#123;    content: &quot;2.8&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;2.8&quot;]::before &amp;#123;    content: &quot;2.8&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;3.0&quot;]::before &amp;#123;    content: &quot;3.0&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;3.0&quot;]::before &amp;#123;    content: &quot;3.0&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;4.0&quot;]::before &amp;#123;    content: &quot;4.0&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;4.0&quot;]::before &amp;#123;    content: &quot;4.0&quot; !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value=&quot;5.0&quot;]::before &amp;#123;    content: &quot;5.0&quot;;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value=&quot;5.0&quot;]::before &amp;#123;    content: &quot;5.0&quot; !important;&amp;#125;</code></pre><p>同样，需要引入样式</p><p>@import “./lineHeight.css”;</p><p>这里有个小问题，就是这个样式，在回显的时候会被插件本身的样式覆盖，想了很久也不知道怎么办。于是想到了个很暴力的方法，放到app.js里。期待能有前端的同学提供更好的解决方案。作为后台的同学，开发前端时毕竟还是以需求为导向，没有更多精力研究前端的原理≡(▔﹏▔)≡。</p><p>最后同样，注册就完事儿~</p><pre><code>var lineHeightConfig = &amp;#123;  scope: Parchment.Scope.INLINE,  whitelist: [    &quot;1.0&quot;,    &quot;1.2&quot;,    &quot;1.5&quot;,    &quot;1.6&quot;,    &quot;1.8&quot;,    &quot;2.0&quot;,    &quot;2.4&quot;,    &quot;2.8&quot;,    &quot;3.0&quot;,    &quot;4.0&quot;,    &quot;5.0&quot;  ]&amp;#125;;var lineHeightClass = new Parchment.Attributor.Class(  &quot;lineheight&quot;,  &quot;ql-line-height&quot;,  lineHeightConfig);var lineHeightStyle = new Parchment.Attributor.Style(  &quot;lineheight&quot;,  &quot;line-height&quot;,  lineHeightConfig);Parchment.register(lineHeightClass);Parchment.register(lineHeightStyle);</code></pre><h4 id="8-空格失效的解决方法"><a href="#8-空格失效的解决方法" class="headerlink" title="8.空格失效的解决方法"></a>8.空格失效的解决方法</h4><p>在联调的过程中发现了一个很尴尬的问题，在后台编辑的文章里，如果输入很多空格，最后在小程序里只显示一个。后来把空格替换成&nbsp;也没有用。后来搜到空格其实有很多种，参考文档：<a href="http://www.oicqzone.com/pc/2015083122336.html">http://www.oicqzone.com/pc/2015083122336.html</a></p><p>经过测试后，发现全角空格可以正常显示，也符合中文输入的习惯，于是对html中所有标签外的空格进行替换。</p><p>this.form.text.replace(/(?&lt;=&gt;[^&lt;]*?) /g, “&emsp;”)</p><h4 id="9-图片上传方式更改"><a href="#9-图片上传方式更改" class="headerlink" title="9.图片上传方式更改"></a>9.图片上传方式更改</h4><p>这个网上资料很多，我直接贴代码了。</p><p>这里的lineheight是文本高亮，需要安装依赖，然后引入import <strong>hljs</strong> from “highlight.js”; 辅助功能不用也OK~</p><pre><code>/*富文本编辑图片上传配置*/const uploadConfig = &amp;#123;  action: &quot;啦啦啦啦啦啦&quot;, // 必填参数 图片上传地址  methods: &quot;POST&quot;, // 必填参数 图片上传方式  token: &quot;&quot;, // 可选参数 如果需要token验证，假设你的token有存放在sessionStorage  name: &quot;file&quot;, // 必填参数 文件的参数名  size: 500, // 可选参数   图片大小，单位为Kb, 1M = 1024Kb  accept: &quot;image/png, image/gif, image/jpeg, image/bmp, image/x-icon&quot; // 可选 可上传的图片格式&amp;#125;;const handlers = &amp;#123;lineheight: function(e) &amp;#123;//添加工具方法let Range = this.quill.getSelection();this.quill.formatText(Range.index, Range.length, &quot;lineheight&quot;, e);&amp;#125;,image: function image() &amp;#123;var self = this;var fileInput = this.container.querySelector(&quot;input.ql-image[type=file]&quot;);if (fileInput === null) &amp;#123;  fileInput = document.createElement(&quot;input&quot;);  fileInput.setAttribute(&quot;type&quot;, &quot;file&quot;);  // 设置图片参数名  if (uploadConfig.name) &amp;#123;    fileInput.setAttribute(&quot;name&quot;, uploadConfig.name);  &amp;#125;  // 可设置上传图片的格式  fileInput.setAttribute(&quot;accept&quot;, uploadConfig.accept);  fileInput.classList.add(&quot;ql-image&quot;);  // 监听选择文件  fileInput.addEventListener(&quot;change&quot;, function() &amp;#123;    // 创建formData    var formData = new FormData();    formData.append(uploadConfig.name, fileInput.files[0]);    formData.append(&quot;object&quot;, &quot;product&quot;);    // 如果需要token且存在token    if (uploadConfig.token) &amp;#123;      formData.append(&quot;token&quot;, uploadConfig.token);    &amp;#125;    // 图片上传    var xhr = new XMLHttpRequest();    xhr.open(uploadConfig.methods, uploadConfig.action, true);    // 上传数据成功，会触发    xhr.onload = function() &amp;#123;      if (xhr.status === 200) &amp;#123;        var res = JSON.parse(xhr.responseText);        let length = self.quill.getSelection(true).index;        //这里很重要，你图片上传成功后，img的src需要在这里添加，res.path就是你服务器返回的图片链接。        self.quill.insertEmbed(length, &quot;image&quot;, res.data.src);        self.quill.setSelection(length + 1);      &amp;#125;      fileInput.value = &quot;&quot;;    &amp;#125;;    // 开始上传数据    xhr.upload.onloadstart = function() &amp;#123;      fileInput.value = &quot;&quot;;    &amp;#125;;    // 当发生网络异常的时候会触发，如果上传数据的过程还未结束    xhr.upload.onerror = function() &amp;#123;&amp;#125;;    // 上传数据完成（成功或者失败）时会触发    xhr.upload.onloadend = function() &amp;#123;      // console.log(&#39;上传结束&#39;)    &amp;#125;;    xhr.send(formData);  &amp;#125;);  this.container.appendChild(fileInput);&amp;#125;fileInput.click();&amp;#125;&amp;#125;;export default &amp;#123;placeholder: &quot;&quot;,theme: &quot;snow&quot;, // 主题modules: &amp;#123;toolbar: &amp;#123;container: toolOptions, // 工具栏选项handlers: handlers // 事件重写&amp;#125;,syntax: &amp;#123;highlight: text =&gt; hljs.highlightAuto(text).value&amp;#125;&amp;#125;&amp;#125;;</code></pre><p>在引用quill的html上，也要加上以下这段内容</p><p><el-upload  class="avatar-uploader"  action="你的OSS接口"  name="file"  :show-file-list="false"  :on-success="uploadSuccessEdit"  :on-error="uploadErrorEdit"  :before-upload="beforeUploadEdit"  style="line-height: 0px"></el-upload></p><h4 id="10-定义工具栏"><a href="#10-定义工具栏" class="headerlink" title="10.定义工具栏"></a>10.定义工具栏</h4><p>上面所有的内容，最后都要在工具栏定义，不然工具栏始终是默认的样子。</p><pre><code>const toolOptions = [[&quot;bold&quot;, &quot;italic&quot;, &quot;underline&quot;, &quot;strike&quot;],  [&quot;blockquote&quot;, &quot;code-block&quot;],  [&amp;#123; header: 1 &amp;#125;, &amp;#123; header: 2 &amp;#125;],  [&amp;#123; list: &quot;ordered&quot; &amp;#125;, &amp;#123; list: &quot;bullet&quot; &amp;#125;],  [&amp;#123; script: &quot;sub&quot; &amp;#125;, &amp;#123; script: &quot;super&quot; &amp;#125;], [&amp;#123; indent: &quot;-1&quot; &amp;#125;, &amp;#123; indent: &quot;+1&quot; &amp;#125;],  [&amp;#123; direction: &quot;rtl&quot; &amp;#125;],  // [&amp;#123; size: [&quot;small&quot;, false, &quot;large&quot;, &quot;huge&quot;] &amp;#125;],  [&amp;#123; size: fontSizeStyle.whitelist &amp;#125;],  [&amp;#123; header: [1, 2, 3, 4, 5, 6, false] &amp;#125;], [&amp;#123; color: [] &amp;#125;, &amp;#123; background: [] &amp;#125;], [&amp;#123; font: [] &amp;#125;],  [&amp;#123; align: [] &amp;#125;],  [&quot;clean&quot;],  [&quot;link&quot;, &quot;image&quot;],  [    &amp;#123;      lineheight: [        &quot;1.0&quot;,        &quot;1.2&quot;,        &quot;1.5&quot;,        &quot;1.6&quot;,        &quot;1.8&quot;,        &quot;2.0&quot;,        &quot;2.4&quot;,        &quot;2.8&quot;,        &quot;3.0&quot;,        &quot;4.0&quot;,        &quot;5.0&quot;      ]    &amp;#125;  ]];</code></pre><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>至此，所有功能都写完了了（主要是我写累了*(੭<em>ˊᵕˋ)੭</em>ଘ），直观一点，圈出来的功能都改了。over~</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596618830036-e4f386ad-ea1b-438a-94fa-b9d1ada89b36.png" alt="image.png"></p></style></p></quill-editor><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/hah/"/>
      <url>/2018/09/07/hah/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
