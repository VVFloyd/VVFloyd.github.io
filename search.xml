<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8 流式编程</title>
      <link href="/2020/08/12/java8stream/"/>
      <url>/2020/08/12/java8stream/</url>
      
        <content type="html"><![CDATA[<h1 id="1-类型推断"><a href="#1-类型推断" class="headerlink" title="1. 类型推断"></a>1. 类型推断</h1><p>什么是类型推断？从一个简单的例子来说明。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>以上int number显示地声明了参数的类型，这使代码上看起来不够清爽。类型推断，就是指省略这些显而易见的内容，把类型推断交给编译器。改进后的内容如下：</p><pre class=" language-java"><code class="language-java">IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>number <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就是这么个意思，名称比类型更为重要。更多信息参考：<a href="http://www.imooc.com/article/details/id/22660%EF%BC%88%E7%84%B6%E8%80%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%9B%B4%E7%BB%86%E4%BA%86%E8%A7%A3%E7%9A%84%E5%BF%85%E8%A6%81%E3%80%82%EF%BC%89">http://www.imooc.com/article/details/id/22660（然而并没有更细了解的必要。）</a></p><h1 id="2-流的创建"><a href="#2-流的创建" class="headerlink" title="2. 流的创建"></a>2. 流的创建</h1><h2 id="2-1-Collection-stream-Collection-parallelStream"><a href="#2-1-Collection-stream-Collection-parallelStream" class="headerlink" title="2.1 Collection.stream(),Collection.parallelStream()"></a>2.1 Collection.stream(),Collection.parallelStream()</h2><p>可以顺便看一下流的迭代方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">long</span> count <span class="token operator">=</span> 100_00000<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Long<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=========传统方式进行外部迭代=========</span>Instant begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Instant end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传统方式进行外部迭代"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=========java8内部迭代，用lambda处理=========</span>begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部迭代forEach"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=========java8进行并行流处理后迭代（备注：并行流输出是没有顺序的 比如不再是1234顺序了）=========</span>begin <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部迭代parallelStream"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次,耗时(ms)："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更多细节参考链接：<a href="https://blog.csdn.net/f641385712/article/details/81514334">https://blog.csdn.net/f641385712/article/details/81514334</a> </p><h2 id="2-2-Arrays-stream-数组"><a href="#2-2-Arrays-stream-数组" class="headerlink" title="2.2 Arrays.stream(数组)"></a>2.2 Arrays.stream(数组)</h2><pre><code> Employee[] emps = new Employee[10]; Stream&lt;Employee&gt; stream2 = Arrays.stream(emps);</code></pre><h2 id="2-3-Stream-of"><a href="#2-3-Stream-of" class="headerlink" title="2.3 Stream.of"></a>2.3 Stream.of</h2><pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-4-无限流"><a href="#2-4-无限流" class="headerlink" title="2.4 无限流"></a>2.4 无限流</h2><pre><code>        //通过迭代创建无限流        Stream&lt;Integer&gt; stream4 = Stream.iterate(0, (x) -&gt; x + 2);        //中间操作和终止操作        stream4.limit(10).forEach(System.out::println);</code></pre><pre><code>Stream.generate(() -&gt; Math.random())        .limit(5)        .forEach(System.out::println);</code></pre><h1 id="3-筛选与切片"><a href="#3-筛选与切片" class="headerlink" title="3. 筛选与切片"></a>3. 筛选与切片</h1><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5022</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5055</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50554</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只选前两个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><p><img src="C:\Users\76386\AppData\Local\Temp\1597203621069.png" alt="1597203621069"></p><h1 id="4-惰性求值和及早求值"><a href="#4-惰性求值和及早求值" class="headerlink" title="4. 惰性求值和及早求值"></a>4. 惰性求值和及早求值</h1><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根本不会执行</span><span class="token comment" spellcheck="true">//实际下面的一段代码是没有任何输出的；</span><span class="token comment" spellcheck="true">//而原因则是filter只刻画了stream，但是并没有产生新的集合，而像这种没有实际功能，只是描述stream的操作，就叫做惰性求值；</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在filter后加上方法，比如count()，则会执行print语句，代码如下：</span><span class="token comment" spellcheck="true">//这种操作则是及早求值。</span><span class="token comment" spellcheck="true">//想要判断是惰性求值与及早求值的方法也很简单，只要看返回值就好，如果是stream则是惰性求值，而如果是另一个值或是空值则是及早求值。</span><span class="token comment" spellcheck="true">//整个过程也和建造者模式有共通之处，建造者模式使用一系列操作设置属性和配置，最后使用build方法，这时对象才会被创建。</span><span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="5-map和flatMap"><a href="#5-map和flatMap" class="headerlink" title="5. map和flatMap"></a>5. map和flatMap</h1><pre class=" language-java"><code class="language-java">       <span class="token comment" spellcheck="true">//-------------------------------------例1-----------------------------------------</span>        <span class="token comment" spellcheck="true">//* map(Function f) 接收Lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，</span><span class="token comment" spellcheck="true">//                                      该参数会被应用到每个元素上，并将其映射成一个新的元素。</span>        <span class="token comment" spellcheck="true">//* mapToDouble(ToDoubleFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</span>        <span class="token comment" spellcheck="true">//* mapToInt(ToIntFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</span>        <span class="token comment" spellcheck="true">//* mapToLong(ToLongFunction f) 接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</span>        <span class="token comment" spellcheck="true">//* flatMap(Function f) 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span>e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> x <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//----------------------------------例2--------------------------------------</span>        <span class="token comment" spellcheck="true">//todo 我没搞懂为什么是字符串却输出地址</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"World"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//    使用flatMap方法的效果是，各个数组并不是分别映射一个流，而是映射成流的内容，</span>        <span class="token comment" spellcheck="true">//    所有使用flatMap(Array::stream)时生成的单个流被合并起来，即扁平化为一个流。</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分云里雾里的确实没看懂，我在等大佬看懂了给我讲，然而大佬是男人，男人都是骗子，所以……还是先看运行结果：</p><blockquote><p>ZHANGSAN<br>LISI<br>WANGWU<br>ZHAOLIU<br>z<br>h<br>a<br>n<br>g<br>s<br>a<br>n<br>l<br>i<br>s<br>i<br>w<br>a<br>n<br>g<br>w<br>u<br>z<br>h<br>a<br>o<br>l<br>i<br>u<br>[Ljava.lang.String;@37bba400</p><h2 id="Ljava-lang-String-179d3b25"><a href="#Ljava-lang-String-179d3b25" class="headerlink" title="[Ljava.lang.String;@179d3b25"></a>[Ljava.lang.String;@179d3b25</h2><p>HeloWrd<br>Process finished with exit code 0</p></blockquote><h1 id="6-排序"><a href="#6-排序" class="headerlink" title="6.排序"></a>6.排序</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Stream&lt;T> sorted();产生一个新的流，按照默认顺序排序</span><span class="token comment" spellcheck="true">//Stream&lt;T> sorted(Comparator&lt;? super T> comparator);产生一个新流，其中按比较器顺序排序</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> emps <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">6666.66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">9999.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">3333.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六1"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"田七"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5555.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="7-串行流和并行流"><a href="#7-串行流和并行流" class="headerlink" title="7.串行流和并行流"></a>7.串行流和并行流</h1><p>参考链接：<a href="https://blog.csdn.net/qq_25112523/article/details/107086727?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param">https://blog.csdn.net/qq_25112523/article/details/107086727?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param</a> </p><h2 id="7-1-串行流stream"><a href="#7-1-串行流stream" class="headerlink" title="7.1 串行流stream"></a>7.1 串行流stream</h2><p>其实在前面已经介绍了很多串行流的方法了，这里简单做一个总结。</p><p>stream的获取方式：</p><h6 id="获取串行流的两种方式："><a href="#获取串行流的两种方式：" class="headerlink" title="获取串行流的两种方式："></a>获取串行流的两种方式：</h6><ul><li>所有的 Collection 集合都可以通过 stream 默认方法获取流：<code>list.stream();</code></li><li>Stream 接口的静态方法 of 可以获取数组对应的流：<code>Stream.of(6,1,5,4,3);</code></li></ul><h6 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h6><p><img src="https://img-blog.csdnimg.cn/20200702162233755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MTEyNTIz,size_16,color_FFFFFF,t_70" alt="img"> </p><h6 id="Stream注意事项-重要"><a href="#Stream注意事项-重要" class="headerlink" title="Stream注意事项(重要)"></a>Stream注意事项(重要)</h6><ol><li>Stream只能操作一次</li><li>Stream方法返回的是新的流</li><li>Stream不调用终结方法，中间的操作不会执行</li></ol><h2 id="7-2-并行流parallelStream"><a href="#7-2-并行流parallelStream" class="headerlink" title="7.2 并行流parallelStream"></a>7.2 并行流parallelStream</h2><h6 id="获取并行流的两种方式："><a href="#获取并行流的两种方式：" class="headerlink" title="获取并行流的两种方式："></a>获取并行流的两种方式：</h6><ul><li>直接获取并行的流：</li><li>将串行流转成并行流：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接获取并行的流</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将串行流转成并行流</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="解决并行流的线程安全问题："><a href="#解决并行流的线程安全问题：" class="headerlink" title="解决并行流的线程安全问题："></a>解决并行流的线程安全问题：</h6><p>多线程下，使用并行流会有线程安全的问题（这里指的是不会按顺序执行，即是多个争先抢后的执行）</p><p>根据需要进行不同的处理：</p><ul><li>使用同步代码块 <code>synchronized</code> （比如使用forEach循环处理时）</li><li>使用线程安全的集合 <code>Vector、Collections.synchronizedList(list)</code></li><li>调用Stream流的 <code>collect/toArray</code> 方法</li></ul><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ol><li>parallelStream是线程不安全的</li><li>parallelStream适用的场景是CPU密集型的，只是做到别浪费CPU，假如本身电脑CPU的负载很大，那还到处用并行流，那并不能起到作用</li><li>I/O密集型 磁盘I/O、网络I/O都属于I/O操作，这部分操作是较少消耗CPU资源，一般并行流中不适用于I/O密集型的操作，就比如使用并流行进行大批量的消息推送，涉及到了大量I/O，使用并行流反而慢了很多</li><li>在使用并行流的时候是无法保证元素的顺序的，也就是即使你用了同步集合也只能保证元素都正确但无法保证其中的顺序</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道的，我向来不喜欢人类</title>
      <link href="/2020/08/12/hah/"/>
      <url>/2020/08/12/hah/</url>
      
        <content type="html"><![CDATA[<p>其实只是记一下这个文章的格式，不必在意<del>~</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP记录操作日志（前端传日志参数）</title>
      <link href="/2020/08/11/aop_log_threadLocal/"/>
      <url>/2020/08/11/aop_log_threadLocal/</url>
      
        <content type="html"><![CDATA[<p>一个AOP记日志的小demo,参考了大佬师父的代码（师父好厉害<del>~</del>）。主要参数前端传递，方法里加个注解就好了。如果是新增的方法，需要返回新增后记录的主键。代码地址：<a href="https://github.com/VVFloyd/logging-with-AOP/tree/dev">https://github.com/VVFloyd/logging-with-AOP/tree/dev</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与Quill相爱相杀</title>
      <link href="/2020/08/05/quill/"/>
      <url>/2020/08/05/quill/</url>
      
        <content type="html"><![CDATA[<h1 id="1-需求："><a href="#1-需求：" class="headerlink" title="1. 需求："></a>1. 需求：</h1><p>管理后台需要一个编辑器对文本内容编辑，内容保存为html，需要兼容支付宝小程序的富文本插件。</p><h1 id="2-主要问题："><a href="#2-主要问题：" class="headerlink" title="2. 主要问题："></a>2. 主要问题：</h1><ol><li>quill编辑的样式都是以class的形式保存。小程序无法还原这类样式。解决方法有两个，一是在小程序的富文本编辑器外，引入对应富文本插件的样式；二是重写管理后台富文本的样式，改成style格式的。本次开发采用第二种方法解决。</li><li>富文本的空格和段落展示有缺陷。参考<a href="http://ueditor.baidu.com/website/onlinedemo.html">http://ueditor.baidu.com/website/onlinedemo.html</a>.测试方法：</li></ol><ul><li>在编辑器输入“<code>111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</code><br>”，然后在第一行中间任意位置键入空格。</li><li>在段首按空格键，每两个空格才生成一次&nbsp;</li></ul><h1 id="3-实现功能："><a href="#3-实现功能：" class="headerlink" title="3. 实现功能："></a>3. 实现功能：</h1><p>针对以上需求和富文本通病，本次开发改进了以下问题，总结解决方法以供日后参考。</p><ol><li>quill自定义字体大小</li><li>quill自定义段落缩进</li><li>小程序空格兼容</li><li>quill对齐方式、字体等其他样式，由class转为style的定义</li><li>quill自定义行间距</li><li>quill图片上传方式更改（默认转为base64,改为OSS方式）</li></ol><h1 id="4-具体实现："><a href="#4-具体实现：" class="headerlink" title="4.具体实现："></a>4.具体实现：</h1><h2 id="4-1-引入插件"><a href="#4-1-引入插件" class="headerlink" title="4.1 引入插件"></a>4.1 引入插件</h2><p>这部分比较简单，安装依赖后可快速搭建。参考链接：</p><ol><li>中文文档：<a href="http://kang-bing-kui.gitbook.io/quill/">http://kang-bing-kui.gitbook.io/quill/</a></li><li>详细步骤：<a href="https://www.jianshu.com/p/a6cba69d6e49">https://www.jianshu.com/p/a6cba69d6e49</a></li></ol><p>本次实现变量名称（仅供本文阅读方便）：</p><quill-editor v-model="form.text" :options="quillOption" ref="text" class="ql-editor"><h2 id="4-2-自定义工具栏"><a href="#4-2-自定义工具栏" class="headerlink" title="4.2 自定义工具栏"></a>4.2 自定义工具栏</h2><h4 id="1-在data中定义"><a href="#1-在data中定义" class="headerlink" title="1.在data中定义"></a>1.在data中定义</h4><p>quillOption: quillConfig,</p><h4 id="2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）"><a href="#2-引入自定义文件（写在一个-vue里也OK的，我定义的比较多，就分出去了）" class="headerlink" title="2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）"></a>2.引入自定义文件（写在一个.vue里也OK的，我定义的比较多，就分出去了）</h4><p>import quillConfig from “../quill-config.vue”;</p><h4 id="3-在quillConfig中引入quill官方的样式"><a href="#3-在quillConfig中引入quill官方的样式" class="headerlink" title="3.在quillConfig中引入quill官方的样式"></a>3.在quillConfig中引入quill官方的样式</h4><p>import “quill/dist/quill.core.css”;</p><p>import “quill/dist/quill.snow.css”;</p><p>import “quill/dist/quill.bubble.css”;</p><h4 id="4-引入quill和Parchment"><a href="#4-引入quill和Parchment" class="headerlink" title="4.引入quill和Parchment"></a>4.引入quill和Parchment</h4><p>import Quill from “quill”;</p><p>var Parchment = Quill.<em>import</em>(“parchment”);</p><p>什么是parchment？参考文档：<a href="https://segmentfault.com/a/1190000019114222?utm_source=tag-newest">https://segmentfault.com/a/1190000019114222?utm_source=tag-newest</a></p><p>不理解也没关系，不影响后续自定义。</p><h4 id="5-改变对齐方式和字体的样式格式"><a href="#5-改变对齐方式和字体的样式格式" class="headerlink" title="5.改变对齐方式和字体的样式格式"></a>5.改变对齐方式和字体的样式格式</h4><p>在官方文档中，我们可以看到quill提供了不同的样式选择。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614717371-a54662a2-94fa-4c22-8164-b51ce7e831e8.png" alt="image.png"></p><p>当我们注册class时，最后生成的html中，样式会以ql-开头的样式显示，如果注册style，会生成行内样式。</p><p>代码实现起来其实很简单。首先去node_modules里找到quill.点开如下文件夹：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596614944473-9dd9a6a0-028c-49da-acc6-76054541ad0a.png" alt="image.png"></p><p>在其中寻找你需要改变的样式，以align举例。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615061513-37b477fa-6827-46f4-9c2e-94c7089e8adc.png" alt="image.png"></p><p>查看它的源码，会发现它已经定义好了两种格式：class和style.编辑器默认注册的是class，这是生成的代码中，会包含ql-align-right、al-align-center等class。如果把它改为style的注册方式，生成的代码会变成style=” text-align: right;”的形式，后者才可以被小程序识别。</p><p>明白了原理，代码就很简单了。</p><pre><code>var Align = Quill.import("attributors/style/align");Align.whitelist = ["right", "center", "justify"];//这行不写也OKQuill.register(Align, true);</code></pre><p>类似的，字体也可以按这种方式进行更改。</p><h4 id="6-改变缩进"><a href="#6-改变缩进" class="headerlink" title="6.改变缩进"></a>6.改变缩进</h4><p>虽然明白了这种改变方式，但是当我们想如法炮制改变缩进功能时，却发现源码没有提供style样式。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596615601801-a1560235-517b-4ae5-99e1-92547599c38f.png" alt="image.png"></p><pre class=" language-vue"><code class="language-vue">import Parchment from 'parchment';class IdentAttributor extends Parchment.Attributor.Class &#123;  add(node, value) &#123;    if (value === '+1' || value === '-1') &#123;      let indent = this.value(node) || 0;      value = (value === '+1' ? (indent + 1) : (indent - 1));    &#125;    if (value === 0) &#123;      this.remove(node);      return true;    &#125; else &#123;      return super.add(node, value);    &#125;  &#125;  canAdd(node, value) &#123;    return super.canAdd(node, value) || super.canAdd(node, parseInt(value));  &#125;  value(node) &#123;    return parseInt(super.value(node)) || undefined;  // Don't return NaN  &#125;&#125;let IndentClass = new IdentAttributor('indent', 'ql-indent', &#123;  scope: Parchment.Scope.BLOCK,  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]&#125;);export &#123; IndentClass &#125;;</code></pre><p>你问我怎么办，我也不知道除了自己写，还能怎么办(′д｀ )…彡…彡</p><pre><code>const pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];const TAB_MULTIPLIER = 30;export class IndentAttributor extends Parchment.Attributor.Style &amp;#123;  add(node, value) &amp;#123;​```return super.add(node, $&amp;#123;+value * TAB_MULTIPLIER&amp;#125;px);  &amp;#125;​```  value(node) &amp;#123;​```return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined;​```  &amp;#125;&amp;#125;export const IndentStyle = new IndentAttributor("indent", "margin-left", &amp;#123;  scope: Parchment.Scope.BLOCK,    whitelist: pixelLevels.map(value =&gt; $&amp;#123;value * TAB_MULTIPLIER&amp;#125;px)&amp;#125;);Quill.register(&amp;#123; "formats/indent": IndentStyle &amp;#125;, true);</code></pre><p>上面这段代码，其实就是仿照源码，自定义一个样式，然后进行注册。每次向左或向右偏移30个像素。</p><h4 id="7-自定义字体大小"><a href="#7-自定义字体大小" class="headerlink" title="7.自定义字体大小"></a>7.自定义字体大小</h4><p>默认样式中，quill只提供了三个大小，并且是以class的方式实现的。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596616366042-869a3a3a-cd21-4640-b963-a712ec4de5bd.png" alt="image.png"></p><p>这样的功能略显潦草，即使换成style的样式也觉得不够用。于是自己定义。首先你需要写个css.</p><pre><code>size-set.css.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='10px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='10px']::before &amp;#123;    content: '10px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='12px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='12px']::before &amp;#123;    content: '12px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='14px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='14px']::before &amp;#123;    content: '14px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='16px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='16px']::before &amp;#123;    content: '16px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='18px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='18px']::before &amp;#123;    content: '18px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='20px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='20px']::before &amp;#123;    content: '20px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='22px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='22px']::before &amp;#123;    content: '22px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='24px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='24px']::before &amp;#123;    content: '24px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='26px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='26px']::before &amp;#123;    content: '26px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='28px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='28px']::before &amp;#123;    content: '28px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='30px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='30px']::before &amp;#123;    content: '30px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='32px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='32px']::before &amp;#123;    content: '32px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='36px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='36px']::before &amp;#123;    content: '36px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='38px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='38px']::before &amp;#123;    content: '38px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='40px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='40px']::before &amp;#123;    content: '40px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='45px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='45px']::before &amp;#123;    content: '45px';&amp;#125;.ql-snow .ql-picker.ql-size .ql-picker-label[data-value='50px']::before, .ql-snow .ql-picker.ql-size .ql-picker-item[data-value='50px']::before &amp;#123;    content: '50px';&amp;#125;/**设置默认字体显示**/.ql-container &amp;#123;    font-size:16px;&amp;#125;</code></pre><p>然后在&lt; style&gt;标签中引入这个样式文件。</p><p>@import “./size-set.css”;</p><p>之后就可以愉快的注册啦。</p><pre><code>fontSizeStyle.whitelist = [  "10px",  "12px",  "14px",  "16px",  "18px",  "20px",  "22px",  "24px",  "26px",  "28px",  "30px",  "32px",  "36px",  "38px",  "40px",  "45px",  "50px",  false];Quill.register(fontSizeStyle, true);</code></pre><p>8.自定义行间距</p><p>对于有的功能，我们直接进行覆写，对于没有的功能，需要自定义新的按钮。</p><p>想要实现行间距，首先还是需要写个css（悄咪咪吐槽，语雀这个编辑器也不好用啊，代码看起来好乱Σ(っ °Д °;)っ）。</p><pre><code>lineHeight.css.ql-snow .ql-picker.ql-lineheight &amp;#123;    width: 58px;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.0"]::before &amp;#123;    content: "1.0";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.0"]::before &amp;#123;    content: "1.0" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.2"]::before &amp;#123;    content: "1.2";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.2"]::before &amp;#123;    content: "1.2" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.5"]::before &amp;#123;    content: "1.5";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.5"]::before &amp;#123;    content: "1.5" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.6"]::before &amp;#123;    content: "1.6";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.6"]::before &amp;#123;    content: "1.6" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="1.8"]::before &amp;#123;    content: "1.8";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="1.8"]::before &amp;#123;    content: "1.8" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.0"]::before &amp;#123;    content: "2.0";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.0"]::before &amp;#123;    content: "2.0" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.4"]::before &amp;#123;    content: "2.4";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.4"]::before &amp;#123;    content: "2.4" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="2.8"]::before &amp;#123;    content: "2.8";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="2.8"]::before &amp;#123;    content: "2.8" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="3.0"]::before &amp;#123;    content: "3.0";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="3.0"]::before &amp;#123;    content: "3.0" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="4.0"]::before &amp;#123;    content: "4.0";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="4.0"]::before &amp;#123;    content: "4.0" !important;&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value="5.0"]::before &amp;#123;    content: "5.0";&amp;#125;.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value="5.0"]::before &amp;#123;    content: "5.0" !important;&amp;#125;</code></pre><p>同样，需要引入样式</p><p>@import “./lineHeight.css”;</p><p>这里有个小问题，就是这个样式，在回显的时候会被插件本身的样式覆盖，想了很久也不知道怎么办。于是想到了个很暴力的方法，放到app.js里。期待能有前端的同学提供更好的解决方案。作为后台的同学，开发前端时毕竟还是以需求为导向，没有更多精力研究前端的原理≡(▔﹏▔)≡。</p><p>最后同样，注册就完事儿~</p><pre><code>var lineHeightConfig = &amp;#123;  scope: Parchment.Scope.INLINE,  whitelist: [    "1.0",    "1.2",    "1.5",    "1.6",    "1.8",    "2.0",    "2.4",    "2.8",    "3.0",    "4.0",    "5.0"  ]&amp;#125;;var lineHeightClass = new Parchment.Attributor.Class(  "lineheight",  "ql-line-height",  lineHeightConfig);var lineHeightStyle = new Parchment.Attributor.Style(  "lineheight",  "line-height",  lineHeightConfig);Parchment.register(lineHeightClass);Parchment.register(lineHeightStyle);</code></pre><h4 id="8-空格失效的解决方法"><a href="#8-空格失效的解决方法" class="headerlink" title="8.空格失效的解决方法"></a>8.空格失效的解决方法</h4><p>在联调的过程中发现了一个很尴尬的问题，在后台编辑的文章里，如果输入很多空格，最后在小程序里只显示一个。后来把空格替换成&nbsp;也没有用。后来搜到空格其实有很多种，参考文档：<a href="http://www.oicqzone.com/pc/2015083122336.html">http://www.oicqzone.com/pc/2015083122336.html</a></p><p>经过测试后，发现全角空格可以正常显示，也符合中文输入的习惯，于是对html中所有标签外的空格进行替换。</p><p>this.form.text.replace(/(?&lt;=&gt;[^&lt;]*?) /g, “ ”)</p><h4 id="9-图片上传方式更改"><a href="#9-图片上传方式更改" class="headerlink" title="9.图片上传方式更改"></a>9.图片上传方式更改</h4><p>这个网上资料很多，我直接贴代码了。</p><p>这里的lineheight是文本高亮，需要安装依赖，然后引入import <strong>hljs</strong> from “highlight.js”; 辅助功能不用也OK~</p><pre><code>/*富文本编辑图片上传配置*/const uploadConfig = &amp;#123;  action: "啦啦啦啦啦啦", // 必填参数 图片上传地址  methods: "POST", // 必填参数 图片上传方式  token: "", // 可选参数 如果需要token验证，假设你的token有存放在sessionStorage  name: "file", // 必填参数 文件的参数名  size: 500, // 可选参数   图片大小，单位为Kb, 1M = 1024Kb  accept: "image/png, image/gif, image/jpeg, image/bmp, image/x-icon" // 可选 可上传的图片格式&amp;#125;;const handlers = &amp;#123;lineheight: function(e) &amp;#123;//添加工具方法let Range = this.quill.getSelection();this.quill.formatText(Range.index, Range.length, "lineheight", e);&amp;#125;,image: function image() &amp;#123;var self = this;var fileInput = this.container.querySelector("input.ql-image[type=file]");if (fileInput === null) &amp;#123;  fileInput = document.createElement("input");  fileInput.setAttribute("type", "file");  // 设置图片参数名  if (uploadConfig.name) &amp;#123;    fileInput.setAttribute("name", uploadConfig.name);  &amp;#125;  // 可设置上传图片的格式  fileInput.setAttribute("accept", uploadConfig.accept);  fileInput.classList.add("ql-image");  // 监听选择文件  fileInput.addEventListener("change", function() &amp;#123;    // 创建formData    var formData = new FormData();    formData.append(uploadConfig.name, fileInput.files[0]);    formData.append("object", "product");    // 如果需要token且存在token    if (uploadConfig.token) &amp;#123;      formData.append("token", uploadConfig.token);    &amp;#125;    // 图片上传    var xhr = new XMLHttpRequest();    xhr.open(uploadConfig.methods, uploadConfig.action, true);    // 上传数据成功，会触发    xhr.onload = function() &amp;#123;      if (xhr.status === 200) &amp;#123;        var res = JSON.parse(xhr.responseText);        let length = self.quill.getSelection(true).index;        //这里很重要，你图片上传成功后，img的src需要在这里添加，res.path就是你服务器返回的图片链接。        self.quill.insertEmbed(length, "image", res.data.src);        self.quill.setSelection(length + 1);      &amp;#125;      fileInput.value = "";    &amp;#125;;    // 开始上传数据    xhr.upload.onloadstart = function() &amp;#123;      fileInput.value = "";    &amp;#125;;    // 当发生网络异常的时候会触发，如果上传数据的过程还未结束    xhr.upload.onerror = function() &amp;#123;&amp;#125;;    // 上传数据完成（成功或者失败）时会触发    xhr.upload.onloadend = function() &amp;#123;      // console.log('上传结束')    &amp;#125;;    xhr.send(formData);  &amp;#125;);  this.container.appendChild(fileInput);&amp;#125;fileInput.click();&amp;#125;&amp;#125;;export default &amp;#123;placeholder: "",theme: "snow", // 主题modules: &amp;#123;toolbar: &amp;#123;container: toolOptions, // 工具栏选项handlers: handlers // 事件重写&amp;#125;,syntax: &amp;#123;highlight: text =&gt; hljs.highlightAuto(text).value&amp;#125;&amp;#125;&amp;#125;;</code></pre><p>在引用quill的html上，也要加上以下这段内容</p><p><el-upload class="avatar-uploader" action="你的OSS接口" name="file" :show-file-list="false" :on-success="uploadSuccessEdit" :on-error="uploadErrorEdit" :before-upload="beforeUploadEdit" style="line-height: 0px"></el-upload></p><h4 id="10-定义工具栏"><a href="#10-定义工具栏" class="headerlink" title="10.定义工具栏"></a>10.定义工具栏</h4><p>上面所有的内容，最后都要在工具栏定义，不然工具栏始终是默认的样子。</p><pre><code>const toolOptions = [["bold", "italic", "underline", "strike"],  ["blockquote", "code-block"],  [&amp;#123; header: 1 &amp;#125;, &amp;#123; header: 2 &amp;#125;],  [&amp;#123; list: "ordered" &amp;#125;, &amp;#123; list: "bullet" &amp;#125;],  [&amp;#123; script: "sub" &amp;#125;, &amp;#123; script: "super" &amp;#125;], [&amp;#123; indent: "-1" &amp;#125;, &amp;#123; indent: "+1" &amp;#125;],  [&amp;#123; direction: "rtl" &amp;#125;],  // [&amp;#123; size: ["small", false, "large", "huge"] &amp;#125;],  [&amp;#123; size: fontSizeStyle.whitelist &amp;#125;],  [&amp;#123; header: [1, 2, 3, 4, 5, 6, false] &amp;#125;], [&amp;#123; color: [] &amp;#125;, &amp;#123; background: [] &amp;#125;], [&amp;#123; font: [] &amp;#125;],  [&amp;#123; align: [] &amp;#125;],  ["clean"],  ["link", "image"],  [    &amp;#123;      lineheight: [        "1.0",        "1.2",        "1.5",        "1.6",        "1.8",        "2.0",        "2.4",        "2.8",        "3.0",        "4.0",        "5.0"      ]    &amp;#125;  ]];</code></pre><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>至此，所有功能都写完了了（主要是我写累了……），直观一点，圈出来的功能都改了。over~</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/441338/1596618830036-e4f386ad-ea1b-438a-94fa-b9d1ada89b36.png" alt="image.png"></p></quill-editor><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
            <tag> 前端 </tag>
            
            <tag> VUE </tag>
            
            <tag> element ui </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
